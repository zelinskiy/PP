
==================== FINAL INTERFACE ====================
2017-11-15 14:18:33.470562731 UTC

interface main@main:Data.SIMD.SIMD4 [family instance module] 8002
  interface hash: 714d15a81ec122c4dfcf3b9ae786b653
  ABI hash: 314de3aec15fafc5935e98ce3f2ff302
  export-list hash: 8c093be496508c7b72fcd028441e5347
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 66690bd91dbcbc41379c22bbd1184eae
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.SIMD.SIMD4.unVectorizeStorableX4
  Data.SIMD.SIMD4.unVectorizeUnboxedX4
  Data.SIMD.SIMD4.unsafeVectorizeUnboxedX4
  Data.SIMD.SIMD4.vectorizeStorableX4
  Data.SIMD.SIMD4.vectorizeUnboxedX4
  Data.SIMD.SIMD4.SIMD4{Data.SIMD.SIMD4.X4 Data.SIMD.SIMD4.broadcastX4 Data.SIMD.SIMD4.indexArrayAsX4 Data.SIMD.SIMD4.indexOffAddrAsX4 Data.SIMD.SIMD4.insertX4 Data.SIMD.SIMD4.minusX4 Data.SIMD.SIMD4.negateX4 Data.SIMD.SIMD4.packX4 Data.SIMD.SIMD4.plusHorizontalX4 Data.SIMD.SIMD4.plusX4 Data.SIMD.SIMD4.readOffAddrAsX4 Data.SIMD.SIMD4.timesHorizontalX4 Data.SIMD.SIMD4.timesX4 Data.SIMD.SIMD4.unpackX4 Data.SIMD.SIMD4.writeOffAddrAsX4}
  Data.SIMD.SIMD4.SIMD4Float{Data.SIMD.SIMD4.divideX4}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Foreign.ForeignPtr a57f95ad34cceecd3d53cb6caf640c90
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.ForeignPtr 20e761047d2a09f17f566a747b24664a
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Unsafe.Coerce 04e2cc33f45c897c8f9bc8758fbe5bc2
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Prim 00000000000000000000000000000000
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive 6f29f7c5aeee7400d08244e0179fc37e
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive 81a30c7a1647fac99d2d6543eb368389
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.ByteArray 964d9bcdac1264cfa972c8e8626bdb30
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.MachDeps c041859a6dbfc20753950012e5093cc3
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Types 75b5f702872d4600fa310bbb0b9d2842
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic a46330d7de2e0b42909dfd32f5d6e1c7
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Base cc8aa91ea5282728711af3acbbd89d22
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Mutable c96042d36416e177dccaa53d194ed45c
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Mutable.Base 8a2e6d400f73e59e3e07e138aec6487c
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive 5b849c3732a15799f9bf28a09f4431fb
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive.Mutable a22e83fa724b75a9283cb68e119ac595
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable 04ed1592bd7110fbf63072fadb404678
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable.Mutable 8f466b34b141674bb6f86b479a6c7c18
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed 9a83f9d7fe08173e41bd9e83acd887dc
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base 5b746d7e99b6b2dacbd3d043cb3d3d35
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Mutable 2c297fa2c086e5a2758d3c59de36878e
addDependentFile "/nix/store/fvf278s3lqsjv488ahhdi8jx6i0qzsr9-ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/nix/store/gv0qd9ymil4r9xbwpx8523vy6jlvwazi-glibc-2.25-dev/include/stdc-predef.h"
7eb401c5f9fb798d1921ed47e7b767f9
  $dmplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Data.SIMD.SIMD4.SIMD4 a,
     GHC.Num.Num a) =>
    Data.SIMD.SIMD4.X4 a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><L,A><S(C(C(S))LLLLLL),U(C(C1(U)),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dSIMD1 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dNum :: GHC.Num.Num a)
                   (v :: Data.SIMD.SIMD4.X4 a) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ a
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ a
                   $dNum
                   (GHC.Num.+ @ a $dNum (GHC.Num.+ @ a $dNum ipv ipv1) ipv2)
                   ipv3 }) -}
f17a00d2d27d08188ea127d004755a74
  $dmtimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Data.SIMD.SIMD4.SIMD4 a,
     GHC.Num.Num a) =>
    Data.SIMD.SIMD4.X4 a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><L,A><S(LLC(C(S))LLLL),U(A,A,C(C1(U)),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dSIMD1 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dNum :: GHC.Num.Num a)
                   (v :: Data.SIMD.SIMD4.X4 a) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ a
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ a
                   $dNum
                   (GHC.Num.* @ a $dNum (GHC.Num.* @ a $dNum ipv ipv1) ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fFractionalX4 ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD4.SIMD4Float a) =>
    GHC.Real.Fractional (Data.SIMD.SIMD4.X4 a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(U(A,A,A,A,A,A,C(U)),A,A,C(U))><L,U(U(U,U,U,U,A,A,A,A,A,C(U),A,A,A,A),U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dFractional :: GHC.Real.Fractional a)
                      ($dSIMD4Float :: Data.SIMD.SIMD4.SIMD4Float a).
                  @ (Data.SIMD.SIMD4.X4 a)
                  (Data.SIMD.SIMD4.$fFractionalX4_$cp1Fractional
                     @ a
                     $dFractional
                     $dSIMD4Float)
                  (Data.SIMD.SIMD4.divideX4 @ a $dSIMD4Float)
                  (Data.SIMD.SIMD4.$fFractionalX4_$crecip
                     @ a
                     $dFractional
                     $dSIMD4Float)
                  (Data.SIMD.SIMD4.$fFractionalX4_$cfromRational
                     @ a
                     $dFractional
                     $dSIMD4Float) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fFractionalX4_$cfromRational ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD4.SIMD4Float a) =>
    GHC.Real.Rational -> Data.SIMD.SIMD4.X4 a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(U))><S(S(LLLLLLLLLC(S)LLLL)L),1*U(1*U(A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A),A)><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dSIMD4Float :: Data.SIMD.SIMD4.SIMD4Float a)
                   (eta :: GHC.Real.Rational) ->
                 Data.SIMD.SIMD4.broadcastX4
                   @ a
                   (Data.SIMD.SIMD4.$p1SIMD4Float @ a $dSIMD4Float)
                   (GHC.Real.fromRational @ a $dFractional eta)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fFractionalX4_$cp1Fractional ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD4.SIMD4Float a) =>
    GHC.Num.Num (Data.SIMD.SIMD4.X4 a)
  {- Arity: 2,
     Strictness: <L,1*U(1*U(A,A,A,A,A,A,C(U)),A,A,A)><L,1*U(1*U(1*U,1*U,1*U,1*U,A,A,A,A,A,C(U),A,A,A,A),A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dSIMD4Float :: Data.SIMD.SIMD4.SIMD4Float a) ->
                 Data.SIMD.SIMD4.$fNumX4
                   @ a
                   (GHC.Real.$p1Fractional @ a $dFractional)
                   (Data.SIMD.SIMD4.$p1SIMD4Float @ a $dSIMD4Float)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fFractionalX4_$crecip ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD4.SIMD4Float a) =>
    Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
  {- Arity: 3,
     Strictness: <L,U(U(A,A,A,A,A,A,C(U)),A,A,C(U))><L,U(U(U,U,U,U,A,A,A,A,A,C(U),A,A,A,A),U)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dSIMD4Float :: Data.SIMD.SIMD4.SIMD4Float a)
                   (eta :: Data.SIMD.SIMD4.X4 a) ->
                 Data.SIMD.SIMD4.divideX4
                   @ a
                   $dSIMD4Float
                   (GHC.Num.fromInteger
                      @ (Data.SIMD.SIMD4.X4 a)
                      (Data.SIMD.SIMD4.$fFractionalX4_$cp1Fractional
                         @ a
                         $dFractional
                         $dSIMD4Float)
                      1)
                   eta) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicLength
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicOverlaps
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeNew
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicInitialize
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeRead
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeWrite
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicClear
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicSet
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeMove
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$cbasicUnsafeGrow -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicLength
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicOverlaps
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeNew
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicInitialize
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeRead
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeWrite
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicClear
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicSet
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeMove
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$cbasicUnsafeGrow -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m ()
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0] <s>_N))
                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild2 { Data.SIMD.SIMD4.Word32X4 x# ->
                            case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeWord32ArrayAsWord32X4#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                         (case Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                            v')))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD4.$w$cbasicUnsafeMove1
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (Data.SIMD.SIMD4.$fMVectorMVectorX40_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild2 { Data.SIMD.SIMD4.Word32X4 x# ->
                                  case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeWord32ArrayAsWord32X4#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                         v1))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0] <s>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0] <s>_N)))
                   (Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0] <s>_N)))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild2 { Data.SIMD.SIMD4.Word32X4 x# ->
                    case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeWord32ArrayAsWord32X4#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Word.Word32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord32ArrayAsWord32X4#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX40_$salignment ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case Data.SIMD.SIMD4.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 4#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicLength
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicOverlaps
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeNew
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicInitialize
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeRead
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeWrite
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicClear
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicSet
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeMove
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$cbasicUnsafeGrow -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m ()
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0] <s>_N))
                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild2 { Data.SIMD.SIMD4.Int64X4 x# ->
                            case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeInt64ArrayAsInt64X4#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                         (case Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                            v')))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD4.$w$cbasicUnsafeMove2
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (Data.SIMD.SIMD4.$fMVectorMVectorX41_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild2 { Data.SIMD.SIMD4.Int64X4 x# ->
                                  case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeInt64ArrayAsInt64X4#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                         v1))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0] <s>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0] <s>_N)))
                   (Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0] <s>_N)))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild2 { Data.SIMD.SIMD4.Int64X4 x# ->
                    case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeInt64ArrayAsInt64X4#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Int.Int64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt64ArrayAsInt64X4#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX41_$salignment ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case Data.SIMD.SIMD4.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 4#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicLength
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicOverlaps
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeNew
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicInitialize
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeRead
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeWrite
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicClear
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicSet
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeMove
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$cbasicUnsafeGrow -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m ()
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0] <s>_N))
                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild2 { Data.SIMD.SIMD4.Int32X4 x# ->
                            case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeInt32ArrayAsInt32X4#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                         (case Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                            v')))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD4.$w$cbasicUnsafeMove3
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (Data.SIMD.SIMD4.$fMVectorMVectorX42_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild2 { Data.SIMD.SIMD4.Int32X4 x# ->
                                  case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeInt32ArrayAsInt32X4#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                         v1))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0] <s>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0] <s>_N)))
                   (Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0] <s>_N)))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild2 { Data.SIMD.SIMD4.Int32X4 x# ->
                    case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeInt32ArrayAsInt32X4#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Int.Int32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt32ArrayAsInt32X4#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX42_$salignment ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case Data.SIMD.SIMD4.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 4#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicLength
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicOverlaps
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeNew
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicInitialize
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeRead
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeWrite
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicClear
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicSet
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeMove
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$cbasicUnsafeGrow -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m ()
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0] <s>_N))
                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild2 { Data.SIMD.SIMD4.DoubleX4 x# ->
                            case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeDoubleArrayAsDoubleX4#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                         (case Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                            v')))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD4.$w$cbasicUnsafeMove4
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (Data.SIMD.SIMD4.$fMVectorMVectorX43_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Double)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild2 { Data.SIMD.SIMD4.DoubleX4 x# ->
                                  case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeDoubleArrayAsDoubleX4#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                         v1))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0] <s>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0] <s>_N)))
                   (Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0] <s>_N)))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Types.Double -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild2 { Data.SIMD.SIMD4.DoubleX4 x# ->
                    case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeDoubleArrayAsDoubleX4#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readDoubleArrayAsDoubleX4#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.DoubleX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX43_$salignment ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case Data.SIMD.SIMD4.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 4#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicLength
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicOverlaps
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeNew
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicInitialize
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeRead
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeWrite
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicClear
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicSet
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeMove
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$cbasicUnsafeGrow -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m ()
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0] <s>_N))
                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild2 { Data.SIMD.SIMD4.FloatX4 x# ->
                            case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeFloatArrayAsFloatX4#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                         (case Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                            v')))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD4.$w$cbasicUnsafeMove5
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (Data.SIMD.SIMD4.$fMVectorMVectorX44_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Types.Float)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild2 { Data.SIMD.SIMD4.FloatX4 x# ->
                                  case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeFloatArrayAsFloatX4#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                         v1))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0] <s>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0] <s>_N)))
                   (Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0] <s>_N)))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Types.Float -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild2 { Data.SIMD.SIMD4.FloatX4 x# ->
                    case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeFloatArrayAsFloatX4#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Types.Float #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readFloatArrayAsFloatX4#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.FloatX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX44_$salignment ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case Data.SIMD.SIMD4.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 4#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m ()
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0] <s>_N))
                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild2 { Data.SIMD.SIMD4.Word64X4 x# ->
                            case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeWord64ArrayAsWord64X4#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                         (case Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                            v')))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD4.$w$cbasicUnsafeMove
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (Data.SIMD.SIMD4.$fMVectorMVectorX4_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild2 { Data.SIMD.SIMD4.Word64X4 x# ->
                                  case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeWord64ArrayAsWord64X4#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                         v1))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0] <s>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0] <s>_N)))
                   (Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0] <s>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0] <s>_N)))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild2 { Data.SIMD.SIMD4.Word64X4 x# ->
                    case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeWord64ArrayAsWord64X4#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Word.Word64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord64ArrayAsWord64X4#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fMVectorMVectorX4_$salignment ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case Data.SIMD.SIMD4.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 4#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fNumX4 ::
    (GHC.Num.Num a, Data.SIMD.SIMD4.SIMD4 a) =>
    GHC.Num.Num (Data.SIMD.SIMD4.X4 a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><L,U(1*U,1*U,1*U,1*U,A,A,A,A,A,C(U),A,A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dNum :: GHC.Num.Num a)
                      ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a).
                  @ (Data.SIMD.SIMD4.X4 a)
                  (Data.SIMD.SIMD4.plusX4 @ a $dSIMD4)
                  (Data.SIMD.SIMD4.minusX4 @ a $dSIMD4)
                  (Data.SIMD.SIMD4.timesX4 @ a $dSIMD4)
                  (Data.SIMD.SIMD4.negateX4 @ a $dSIMD4)
                  (Data.SIMD.SIMD4.$fNumX4_$cabs @ a $dNum $dSIMD4)
                  (Data.SIMD.SIMD4.$fNumX4_$csignum @ a $dNum $dSIMD4)
                  (Data.SIMD.SIMD4.$fNumX4_$cfromInteger @ a $dNum $dSIMD4) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fNumX4_$cabs ::
    (GHC.Num.Num a, Data.SIMD.SIMD4.SIMD4 a) =>
    Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
  {- Arity: 2, Strictness: <B,A><B,A>x, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a) ->
                 GHC.Err.error
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a)
                   (GHC.Stack.Types.PushCallStack
                      (GHC.Base.build
                         @ GHC.Types.Char
                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                      (GHC.Stack.Types.SrcLoc
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD4"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD4.hs"#))
                         (GHC.Types.I# 108#)
                         (GHC.Types.I# 11#)
                         (GHC.Types.I# 108#)
                         (GHC.Types.I# 40#))
                      GHC.Stack.Types.EmptyCallStack)
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b ->
                       GHC.CString.unpackFoldrCString# @ b "SIMD4 abs not defined"#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fNumX4_$cfromInteger ::
    (GHC.Num.Num a, Data.SIMD.SIMD4.SIMD4 a) =>
    GHC.Integer.Type.Integer -> Data.SIMD.SIMD4.X4 a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(LLLLLLLLLC(S)LLLL),1*U(A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   (i :: GHC.Integer.Type.Integer) ->
                 Data.SIMD.SIMD4.broadcastX4
                   @ a
                   $dSIMD4
                   (GHC.Num.fromInteger @ a $dNum i)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fNumX4_$csignum ::
    (GHC.Num.Num a, Data.SIMD.SIMD4.SIMD4 a) =>
    Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
  {- Arity: 2, Strictness: <B,A><B,A>x, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a) ->
                 GHC.Err.error
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a)
                   (GHC.Stack.Types.PushCallStack
                      (GHC.Base.build
                         @ GHC.Types.Char
                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                      (GHC.Stack.Types.SrcLoc
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD4"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD4.hs"#))
                         (GHC.Types.I# 109#)
                         (GHC.Types.I# 14#)
                         (GHC.Types.I# 109#)
                         (GHC.Types.I# 46#))
                      GHC.Stack.Types.EmptyCallStack)
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b ->
                       GHC.CString.unpackFoldrCString#
                         @ b
                         "SIMD4 signum not defined"#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                  Data.SIMD.SIMD4.$fPrimX4_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX4_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX4_$cindexByteArray#
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$creadByteArray#
                  Data.SIMD.SIMD4.$fPrimX4_$cwriteByteArray#
                  Data.SIMD.SIMD4.$fPrimX4_$csetByteArray#
                  Data.SIMD.SIMD4.$fPrimX4_$cindexOffAddr#
                  Data.SIMD.SIMD4.$fPrimX4_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX4_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fPrimX4_$csetOffAddr# -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                  Data.SIMD.SIMD4.$fPrimX40_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX40_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX40_$cindexByteArray#
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$creadByteArray#
                  Data.SIMD.SIMD4.$fPrimX40_$cwriteByteArray#
                  Data.SIMD.SIMD4.$fPrimX40_$csetByteArray#
                  Data.SIMD.SIMD4.$fPrimX40_$cindexOffAddr#
                  Data.SIMD.SIMD4.$fPrimX40_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX40_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fPrimX40_$csetOffAddr# -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord32ArrayAsWord32X4#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word32X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord32OffAddrAsWord32X4#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word32X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Word.Word32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord32OffAddrAsWord32X4#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$csizeOf# ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 Data.SIMD.SIMD4.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 4#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord32ArrayAsWord32X4# @ s arr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX40_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord32OffAddrAsWord32X4#
                   @ s
                   addr#
                   wild1
                   x#
                   s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                  Data.SIMD.SIMD4.$fPrimX41_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX41_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX41_$cindexByteArray#
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$creadByteArray#
                  Data.SIMD.SIMD4.$fPrimX41_$cwriteByteArray#
                  Data.SIMD.SIMD4.$fPrimX41_$csetByteArray#
                  Data.SIMD.SIMD4.$fPrimX41_$cindexOffAddr#
                  Data.SIMD.SIMD4.$fPrimX41_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX41_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fPrimX41_$csetOffAddr# -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt64ArrayAsInt64X4#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int64X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$cindexOffAddr# ::
    GHC.Prim.Addr# -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt64OffAddrAsInt64X4#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int64X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Int.Int64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt64OffAddrAsInt64X4#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$csizeOf# ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 Data.SIMD.SIMD4.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 4#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt64ArrayAsInt64X4# @ s arr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX41_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt64OffAddrAsInt64X4# @ s addr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                  Data.SIMD.SIMD4.$fPrimX42_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX42_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX42_$cindexByteArray#
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$creadByteArray#
                  Data.SIMD.SIMD4.$fPrimX42_$cwriteByteArray#
                  Data.SIMD.SIMD4.$fPrimX42_$csetByteArray#
                  Data.SIMD.SIMD4.$fPrimX42_$cindexOffAddr#
                  Data.SIMD.SIMD4.$fPrimX42_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX42_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fPrimX42_$csetOffAddr# -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt32ArrayAsInt32X4#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int32X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$cindexOffAddr# ::
    GHC.Prim.Addr# -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt32OffAddrAsInt32X4#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int32X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Int.Int32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt32OffAddrAsInt32X4#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$csizeOf# ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 Data.SIMD.SIMD4.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 4#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt32ArrayAsInt32X4# @ s arr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX42_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt32OffAddrAsInt32X4# @ s addr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                  Data.SIMD.SIMD4.$fPrimX43_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX43_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX43_$cindexByteArray#
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$creadByteArray#
                  Data.SIMD.SIMD4.$fPrimX43_$cwriteByteArray#
                  Data.SIMD.SIMD4.$fPrimX43_$csetByteArray#
                  Data.SIMD.SIMD4.$fPrimX43_$cindexOffAddr#
                  Data.SIMD.SIMD4.$fPrimX43_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX43_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fPrimX43_$csetOffAddr# -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexDoubleArrayAsDoubleX4#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.DoubleX4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexDoubleOffAddrAsDoubleX4#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.DoubleX4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readDoubleOffAddrAsDoubleX4#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.DoubleX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$csizeOf# ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 Data.SIMD.SIMD4.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 4#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeDoubleArrayAsDoubleX4# @ s arr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX43_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeDoubleOffAddrAsDoubleX4#
                   @ s
                   addr#
                   wild1
                   x#
                   s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                  Data.SIMD.SIMD4.$fPrimX44_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX44_$csizeOf#
                  Data.SIMD.SIMD4.$fPrimX44_$cindexByteArray#
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$creadByteArray#
                  Data.SIMD.SIMD4.$fPrimX44_$cwriteByteArray#
                  Data.SIMD.SIMD4.$fPrimX44_$csetByteArray#
                  Data.SIMD.SIMD4.$fPrimX44_$cindexOffAddr#
                  Data.SIMD.SIMD4.$fPrimX44_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX44_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fPrimX44_$csetOffAddr# -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexFloatArrayAsFloatX4#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.FloatX4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexFloatOffAddrAsFloatX4#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.FloatX4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Types.Float #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readFloatOffAddrAsFloatX4#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.FloatX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$csizeOf# ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 Data.SIMD.SIMD4.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 4#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeFloatArrayAsFloatX4# @ s arr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX44_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeFloatOffAddrAsFloatX4# @ s addr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord64ArrayAsWord64X4#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word64X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord64OffAddrAsWord64X4#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word64X4 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 GHC.Word.Word64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD4.mul4 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord64OffAddrAsWord64X4#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$csizeOf# ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 Data.SIMD.SIMD4.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 4#))) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord64ArrayAsWord64X4# @ s arr# wild1 x# s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fPrimX4_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 x# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord64OffAddrAsWord64X4#
                   @ s
                   addr#
                   wild1
                   x#
                   s# } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double :: Data.SIMD.SIMD4.SIMD4 GHC.Types.Double
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.SIMD.SIMD4.$fSIMD4Double_$cplusX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cminusX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$ctimesX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cnegateX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cindexArrayAsX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cindexOffAddrAsX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cinsertX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cunpackX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cpackX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$cbroadcastX4
                  Data.SIMD.SIMD4.$fPrimX43_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX43_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fSIMD4Double_$cplusHorizontalX4
                  Data.SIMD.SIMD4.$fSIMD4Double_$ctimesHorizontalX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cbroadcastX4 ::
    GHC.Types.Double -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Types.Double) ->
                 case ds of wild { GHC.Types.D# r ->
                 (Data.SIMD.SIMD4.DoubleX4 (GHC.Prim.broadcastDoubleX4# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cindexArrayAsX4 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexDoubleArrayAsDoubleX4#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.DoubleX4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cindexOffAddrAsX4 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexDoubleOffAddrAsDoubleX4#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.DoubleX4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cinsertX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (ds1 :: GHC.Types.Double)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case ds1 of wild1 { GHC.Types.D# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertDoubleX4# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD4.DoubleX4 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cminusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild1 { Data.SIMD.SIMD4.DoubleX4 v2# ->
                 (Data.SIMD.SIMD4.DoubleX4 (GHC.Prim.minusDoubleX4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cnegateX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 (Data.SIMD.SIMD4.DoubleX4 (GHC.Prim.negateDoubleX4# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cpackX4 ::
    (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
       GHC.Types.Double #)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
                             GHC.Types.Double #)) ->
                 case ds of wild { (#,,,#) ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { GHC.Types.D# r1 ->
                 case ds2 of wild2 { GHC.Types.D# r2 ->
                 case ds3 of wild3 { GHC.Types.D# r3 ->
                 case ds4 of wild4 { GHC.Types.D# r4 ->
                 (Data.SIMD.SIMD4.DoubleX4
                    (GHC.Prim.packDoubleX4# (# r1, r2, r3, r4 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Types.Double,
     GHC.Num.Num GHC.Types.Double) =>
    Data.SIMD.SIMD4.X4 GHC.Types.Double -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Types.Double)
                   ($dNum :: GHC.Num.Num GHC.Types.Double)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Types.Double
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ GHC.Types.Double
                   $dNum
                   (GHC.Num.+
                      @ GHC.Types.Double
                      $dNum
                      (GHC.Num.+ @ GHC.Types.Double $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cplusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild1 { Data.SIMD.SIMD4.DoubleX4 v2# ->
                 (Data.SIMD.SIMD4.DoubleX4 (GHC.Prim.plusDoubleX4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$ctimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Types.Double,
     GHC.Num.Num GHC.Types.Double) =>
    Data.SIMD.SIMD4.X4 GHC.Types.Double -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Types.Double)
                   ($dNum :: GHC.Num.Num GHC.Types.Double)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Types.Double
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ GHC.Types.Double
                   $dNum
                   (GHC.Num.*
                      @ GHC.Types.Double
                      $dNum
                      (GHC.Num.* @ GHC.Types.Double $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$ctimesX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild1 { Data.SIMD.SIMD4.DoubleX4 v2# ->
                 (Data.SIMD.SIMD4.DoubleX4 (GHC.Prim.timesDoubleX4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Double_$cunpackX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
          GHC.Types.Double #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case GHC.Prim.unpackDoubleX4# v1# of wild1 { (#,,,#) r1 r2 r3 r4 ->
                 (# GHC.Types.D# r1, GHC.Types.D# r2, GHC.Types.D# r3,
                    GHC.Types.D# r4 #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float :: Data.SIMD.SIMD4.SIMD4 GHC.Types.Float
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.SIMD.SIMD4.$fSIMD4Float_$cplusX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cminusX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$ctimesX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cnegateX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cindexArrayAsX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cindexOffAddrAsX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cinsertX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cunpackX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cpackX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$cbroadcastX4
                  Data.SIMD.SIMD4.$fPrimX44_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX44_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fSIMD4Float_$cplusHorizontalX4
                  Data.SIMD.SIMD4.$fSIMD4Float_$ctimesHorizontalX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4FloatDouble :: Data.SIMD.SIMD4.SIMD4Float GHC.Types.Double
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.SIMD.SIMD4.$fSIMD4Double
                  Data.SIMD.SIMD4.$fSIMD4FloatDouble_$cdivideX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4FloatDouble_$cdivideX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild1 { Data.SIMD.SIMD4.DoubleX4 v2# ->
                 case GHC.Prim.divideDoubleX4# v1# v2# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.DoubleX4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4FloatFloat :: Data.SIMD.SIMD4.SIMD4Float GHC.Types.Float
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.SIMD.SIMD4.$fSIMD4Float
                  Data.SIMD.SIMD4.$fSIMD4FloatFloat_$cdivideX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4FloatFloat_$cdivideX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild1 { Data.SIMD.SIMD4.FloatX4 v2# ->
                 case GHC.Prim.divideFloatX4# v1# v2# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.FloatX4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cbroadcastX4 ::
    GHC.Types.Float -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Types.Float) ->
                 case ds of wild { GHC.Types.F# r ->
                 (Data.SIMD.SIMD4.FloatX4 (GHC.Prim.broadcastFloatX4# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cindexArrayAsX4 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexFloatArrayAsFloatX4#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.FloatX4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cindexOffAddrAsX4 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexFloatOffAddrAsFloatX4#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.FloatX4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cinsertX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (ds1 :: GHC.Types.Float)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case ds1 of wild1 { GHC.Types.F# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertFloatX4# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD4.FloatX4 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cminusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild1 { Data.SIMD.SIMD4.FloatX4 v2# ->
                 (Data.SIMD.SIMD4.FloatX4 (GHC.Prim.minusFloatX4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cnegateX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 (Data.SIMD.SIMD4.FloatX4 (GHC.Prim.negateFloatX4# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cpackX4 ::
    (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
       GHC.Types.Float #)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                             GHC.Types.Float #)) ->
                 case ds of wild { (#,,,#) ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { GHC.Types.F# r1 ->
                 case ds2 of wild2 { GHC.Types.F# r2 ->
                 case ds3 of wild3 { GHC.Types.F# r3 ->
                 case ds4 of wild4 { GHC.Types.F# r4 ->
                 (Data.SIMD.SIMD4.FloatX4
                    (GHC.Prim.packFloatX4# (# r1, r2, r3, r4 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Types.Float,
     GHC.Num.Num GHC.Types.Float) =>
    Data.SIMD.SIMD4.X4 GHC.Types.Float -> GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Types.Float)
                   ($dNum :: GHC.Num.Num GHC.Types.Float)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Types.Float
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ GHC.Types.Float
                   $dNum
                   (GHC.Num.+
                      @ GHC.Types.Float
                      $dNum
                      (GHC.Num.+ @ GHC.Types.Float $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cplusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild1 { Data.SIMD.SIMD4.FloatX4 v2# ->
                 (Data.SIMD.SIMD4.FloatX4 (GHC.Prim.plusFloatX4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$ctimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Types.Float,
     GHC.Num.Num GHC.Types.Float) =>
    Data.SIMD.SIMD4.X4 GHC.Types.Float -> GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Types.Float)
                   ($dNum :: GHC.Num.Num GHC.Types.Float)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Types.Float
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ GHC.Types.Float
                   $dNum
                   (GHC.Num.*
                      @ GHC.Types.Float
                      $dNum
                      (GHC.Num.* @ GHC.Types.Float $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$ctimesX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild1 { Data.SIMD.SIMD4.FloatX4 v2# ->
                 (Data.SIMD.SIMD4.FloatX4 (GHC.Prim.timesFloatX4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Float_$cunpackX4 ::
    Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
          GHC.Types.Float #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case GHC.Prim.unpackFloatX4# v1# of wild1 { (#,,,#) r1 r2 r3 r4 ->
                 (# GHC.Types.F# r1, GHC.Types.F# r2, GHC.Types.F# r3,
                    GHC.Types.F# r4 #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32 :: Data.SIMD.SIMD4.SIMD4 GHC.Int.Int32
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cplusX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cminusX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$ctimesX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cnegateX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cindexArrayAsX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cindexOffAddrAsX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cinsertX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cunpackX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cpackX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cbroadcastX4
                  Data.SIMD.SIMD4.$fPrimX42_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX42_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fSIMD4Int32_$cplusHorizontalX4
                  Data.SIMD.SIMD4.$fSIMD4Int32_$ctimesHorizontalX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cbroadcastX4 ::
    GHC.Int.Int32 -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Int.Int32) ->
                 case ds of wild { GHC.Int.I32# r ->
                 (Data.SIMD.SIMD4.Int32X4 (GHC.Prim.broadcastInt32X4# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cindexArrayAsX4 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt32ArrayAsInt32X4#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int32X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cindexOffAddrAsX4 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt32OffAddrAsInt32X4#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int32X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cinsertX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Int.Int32
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (ds1 :: GHC.Int.Int32)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case ds1 of wild1 { GHC.Int.I32# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertInt32X4# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int32X4 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cminusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild1 { Data.SIMD.SIMD4.Int32X4 v2# ->
                 (Data.SIMD.SIMD4.Int32X4 (GHC.Prim.minusInt32X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cnegateX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 v1# ->
                 (Data.SIMD.SIMD4.Int32X4 (GHC.Prim.negateInt32X4# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cpackX4 ::
    (# GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32 #)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32,
                             GHC.Int.Int32 #)) ->
                 case ds of wild { (#,,,#) ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { GHC.Int.I32# r1 ->
                 case ds2 of wild2 { GHC.Int.I32# r2 ->
                 case ds3 of wild3 { GHC.Int.I32# r3 ->
                 case ds4 of wild4 { GHC.Int.I32# r4 ->
                 (Data.SIMD.SIMD4.Int32X4
                    (GHC.Prim.packInt32X4# (# r1, r2, r3, r4 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Int.Int32, GHC.Num.Num GHC.Int.Int32) =>
    Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Int.Int32)
                   ($dNum :: GHC.Num.Num GHC.Int.Int32)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Int.Int32
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ GHC.Int.Int32
                   $dNum
                   (GHC.Num.+
                      @ GHC.Int.Int32
                      $dNum
                      (GHC.Num.+ @ GHC.Int.Int32 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cplusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild1 { Data.SIMD.SIMD4.Int32X4 v2# ->
                 (Data.SIMD.SIMD4.Int32X4 (GHC.Prim.plusInt32X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$ctimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Int.Int32, GHC.Num.Num GHC.Int.Int32) =>
    Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Int.Int32)
                   ($dNum :: GHC.Num.Num GHC.Int.Int32)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Int.Int32
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ GHC.Int.Int32
                   $dNum
                   (GHC.Num.*
                      @ GHC.Int.Int32
                      $dNum
                      (GHC.Num.* @ GHC.Int.Int32 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$ctimesX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild1 { Data.SIMD.SIMD4.Int32X4 v2# ->
                 (Data.SIMD.SIMD4.Int32X4 (GHC.Prim.timesInt32X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int32_$cunpackX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> (# GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case GHC.Prim.unpackInt32X4# v1# of wild1 { (#,,,#) r1 r2 r3 r4 ->
                 (# GHC.Int.I32# r1, GHC.Int.I32# r2, GHC.Int.I32# r3,
                    GHC.Int.I32# r4 #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64 :: Data.SIMD.SIMD4.SIMD4 GHC.Int.Int64
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cplusX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cminusX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$ctimesX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cnegateX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cindexArrayAsX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cindexOffAddrAsX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cinsertX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cunpackX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cpackX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cbroadcastX4
                  Data.SIMD.SIMD4.$fPrimX41_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX41_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fSIMD4Int64_$cplusHorizontalX4
                  Data.SIMD.SIMD4.$fSIMD4Int64_$ctimesHorizontalX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cbroadcastX4 ::
    GHC.Int.Int64 -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Int.Int64) ->
                 case ds of wild { GHC.Int.I64# r ->
                 (Data.SIMD.SIMD4.Int64X4 (GHC.Prim.broadcastInt64X4# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cindexArrayAsX4 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt64ArrayAsInt64X4#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int64X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cindexOffAddrAsX4 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt64OffAddrAsInt64X4#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int64X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cinsertX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Int.Int64
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (ds1 :: GHC.Int.Int64)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case ds1 of wild1 { GHC.Int.I64# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertInt64X4# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD4.Int64X4 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cminusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild1 { Data.SIMD.SIMD4.Int64X4 v2# ->
                 (Data.SIMD.SIMD4.Int64X4 (GHC.Prim.minusInt64X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cnegateX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 v1# ->
                 (Data.SIMD.SIMD4.Int64X4 (GHC.Prim.negateInt64X4# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cpackX4 ::
    (# GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64 #)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64,
                             GHC.Int.Int64 #)) ->
                 case ds of wild { (#,,,#) ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { GHC.Int.I64# r1 ->
                 case ds2 of wild2 { GHC.Int.I64# r2 ->
                 case ds3 of wild3 { GHC.Int.I64# r3 ->
                 case ds4 of wild4 { GHC.Int.I64# r4 ->
                 (Data.SIMD.SIMD4.Int64X4
                    (GHC.Prim.packInt64X4# (# r1, r2, r3, r4 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Int.Int64, GHC.Num.Num GHC.Int.Int64) =>
    Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Int.Int64)
                   ($dNum :: GHC.Num.Num GHC.Int.Int64)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Int.Int64
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ GHC.Int.Int64
                   $dNum
                   (GHC.Num.+
                      @ GHC.Int.Int64
                      $dNum
                      (GHC.Num.+ @ GHC.Int.Int64 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cplusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild1 { Data.SIMD.SIMD4.Int64X4 v2# ->
                 (Data.SIMD.SIMD4.Int64X4 (GHC.Prim.plusInt64X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$ctimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Int.Int64, GHC.Num.Num GHC.Int.Int64) =>
    Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Int.Int64)
                   ($dNum :: GHC.Num.Num GHC.Int.Int64)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Int.Int64
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ GHC.Int.Int64
                   $dNum
                   (GHC.Num.*
                      @ GHC.Int.Int64
                      $dNum
                      (GHC.Num.* @ GHC.Int.Int64 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$ctimesX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild1 { Data.SIMD.SIMD4.Int64X4 v2# ->
                 (Data.SIMD.SIMD4.Int64X4 (GHC.Prim.timesInt64X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Int64_$cunpackX4 ::
    Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> (# GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case GHC.Prim.unpackInt64X4# v1# of wild1 { (#,,,#) r1 r2 r3 r4 ->
                 (# GHC.Int.I64# r1, GHC.Int.I64# r2, GHC.Int.I64# r3,
                    GHC.Int.I64# r4 #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32 :: Data.SIMD.SIMD4.SIMD4 GHC.Word.Word32
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cplusX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cminusX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$ctimesX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cnegateX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cindexArrayAsX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cindexOffAddrAsX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cinsertX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cunpackX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cpackX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cbroadcastX4
                  Data.SIMD.SIMD4.$fPrimX40_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX40_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fSIMD4Word32_$cplusHorizontalX4
                  Data.SIMD.SIMD4.$fSIMD4Word32_$ctimesHorizontalX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cbroadcastX4 ::
    GHC.Word.Word32 -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Word.Word32) ->
                 case ds of wild { GHC.Word.W32# r ->
                 (Data.SIMD.SIMD4.Word32X4 (GHC.Prim.broadcastWord32X4# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cindexArrayAsX4 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord32ArrayAsWord32X4#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word32X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cindexOffAddrAsX4 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord32OffAddrAsWord32X4#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word32X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cinsertX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Word.Word32
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (ds1 :: GHC.Word.Word32)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case ds1 of wild1 { GHC.Word.W32# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertWord32X4# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word32X4 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cminusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild1 { Data.SIMD.SIMD4.Word32X4 v2# ->
                 (Data.SIMD.SIMD4.Word32X4 (GHC.Prim.minusWord32X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cnegateX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 1, Strictness: <B,1*U>b, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD4"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD4.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 170#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 376#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 170#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 412#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case ds of tpl { DEFAULT ->
                 case GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Prim.Word32X4# -> GHC.Prim.Word32X4#)
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString# @ b "cannot negate Word32X4"#))
                 ret_ty (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                 of {} }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cpackX4 ::
    (# GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
       GHC.Word.Word32 #)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
                             GHC.Word.Word32 #)) ->
                 case ds of wild { (#,,,#) ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { GHC.Word.W32# r1 ->
                 case ds2 of wild2 { GHC.Word.W32# r2 ->
                 case ds3 of wild3 { GHC.Word.W32# r3 ->
                 case ds4 of wild4 { GHC.Word.W32# r4 ->
                 (Data.SIMD.SIMD4.Word32X4
                    (GHC.Prim.packWord32X4# (# r1, r2, r3, r4 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Word.Word32,
     GHC.Num.Num GHC.Word.Word32) =>
    Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Word.Word32)
                   ($dNum :: GHC.Num.Num GHC.Word.Word32)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Word.Word32
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ GHC.Word.Word32
                   $dNum
                   (GHC.Num.+
                      @ GHC.Word.Word32
                      $dNum
                      (GHC.Num.+ @ GHC.Word.Word32 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cplusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild1 { Data.SIMD.SIMD4.Word32X4 v2# ->
                 (Data.SIMD.SIMD4.Word32X4 (GHC.Prim.plusWord32X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$ctimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Word.Word32,
     GHC.Num.Num GHC.Word.Word32) =>
    Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Word.Word32)
                   ($dNum :: GHC.Num.Num GHC.Word.Word32)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Word.Word32
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ GHC.Word.Word32
                   $dNum
                   (GHC.Num.*
                      @ GHC.Word.Word32
                      $dNum
                      (GHC.Num.* @ GHC.Word.Word32 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$ctimesX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild1 { Data.SIMD.SIMD4.Word32X4 v2# ->
                 (Data.SIMD.SIMD4.Word32X4 (GHC.Prim.timesWord32X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word32_$cunpackX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> (# GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
          GHC.Word.Word32 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case GHC.Prim.unpackWord32X4# v1# of wild1 { (#,,,#) r1 r2 r3 r4 ->
                 (# GHC.Word.W32# r1, GHC.Word.W32# r2, GHC.Word.W32# r3,
                    GHC.Word.W32# r4 #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64 :: Data.SIMD.SIMD4.SIMD4 GHC.Word.Word64
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cplusX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cminusX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$ctimesX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cnegateX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cindexArrayAsX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cindexOffAddrAsX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cinsertX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cunpackX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cpackX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cbroadcastX4
                  Data.SIMD.SIMD4.$fPrimX4_$creadOffAddr#
                  Data.SIMD.SIMD4.$fPrimX4_$cwriteOffAddr#
                  Data.SIMD.SIMD4.$fSIMD4Word64_$cplusHorizontalX4
                  Data.SIMD.SIMD4.$fSIMD4Word64_$ctimesHorizontalX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cbroadcastX4 ::
    GHC.Word.Word64 -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Word.Word64) ->
                 case ds of wild { GHC.Word.W64# r ->
                 (Data.SIMD.SIMD4.Word64X4 (GHC.Prim.broadcastWord64X4# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cindexArrayAsX4 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord64ArrayAsWord64X4#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word64X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cindexOffAddrAsX4 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord64OffAddrAsWord64X4#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word64X4 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cinsertX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Word.Word64
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (ds1 :: GHC.Word.Word64)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case ds1 of wild1 { GHC.Word.W64# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertWord64X4# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD4.Word64X4 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cminusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild1 { Data.SIMD.SIMD4.Word64X4 v2# ->
                 (Data.SIMD.SIMD4.Word64X4 (GHC.Prim.minusWord64X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cnegateX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 1, Strictness: <B,1*U>b, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD4"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD4.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 177#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 376#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 177#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 412#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case ds of tpl { DEFAULT ->
                 case GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Prim.Word64X4# -> GHC.Prim.Word64X4#)
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString# @ b "cannot negate Word64X4"#))
                 ret_ty (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                 of {} }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cpackX4 ::
    (# GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
       GHC.Word.Word64 #)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
                             GHC.Word.Word64 #)) ->
                 case ds of wild { (#,,,#) ds1 ds2 ds3 ds4 ->
                 case ds1 of wild1 { GHC.Word.W64# r1 ->
                 case ds2 of wild2 { GHC.Word.W64# r2 ->
                 case ds3 of wild3 { GHC.Word.W64# r3 ->
                 case ds4 of wild4 { GHC.Word.W64# r4 ->
                 (Data.SIMD.SIMD4.Word64X4
                    (GHC.Prim.packWord64X4# (# r1, r2, r3, r4 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cplusHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Word.Word64,
     GHC.Num.Num GHC.Word.Word64) =>
    Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Word.Word64)
                   ($dNum :: GHC.Num.Num GHC.Word.Word64)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Word.Word64
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.+
                   @ GHC.Word.Word64
                   $dNum
                   (GHC.Num.+
                      @ GHC.Word.Word64
                      $dNum
                      (GHC.Num.+ @ GHC.Word.Word64 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cplusX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild1 { Data.SIMD.SIMD4.Word64X4 v2# ->
                 (Data.SIMD.SIMD4.Word64X4 (GHC.Prim.plusWord64X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$ctimesHorizontalX4 ::
    (Data.SIMD.SIMD4.SIMD4 GHC.Word.Word64,
     GHC.Num.Num GHC.Word.Word64) =>
    Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 GHC.Word.Word64)
                   ($dNum :: GHC.Num.Num GHC.Word.Word64)
                   (v :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ GHC.Word.Word64
                        $dSIMD4
                        v of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Num.*
                   @ GHC.Word.Word64
                   $dNum
                   (GHC.Num.*
                      @ GHC.Word.Word64
                      $dNum
                      (GHC.Num.* @ GHC.Word.Word64 $dNum ipv ipv1)
                      ipv2)
                   ipv3 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$ctimesX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (ds1 :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild1 { Data.SIMD.SIMD4.Word64X4 v2# ->
                 (Data.SIMD.SIMD4.Word64X4 (GHC.Prim.timesWord64X4# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fSIMD4Word64_$cunpackX4 ::
    Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> (# GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
          GHC.Word.Word64 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD4.X4 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case GHC.Prim.unpackWord64X4# v1# of wild1 { (#,,,#) r1 r2 r3 r4 ->
                 (# GHC.Word.W64# r1, GHC.Word.W64# r2, GHC.Word.W64# r3,
                    GHC.Word.W64# r4 #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fShowX4 ::
    (GHC.Show.Show a, Data.SIMD.SIMD4.SIMD4 a) =>
    GHC.Show.Show (Data.SIMD.SIMD4.X4 a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,C(U(U,U,U,U)),A,A,A,A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dShow :: GHC.Show.Show a)
                      ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a).
                  @ (Data.SIMD.SIMD4.X4 a)
                  (Data.SIMD.SIMD4.$fShowX4_$cshowsPrec @ a $dShow $dSIMD4)
                  (Data.SIMD.SIMD4.$fShowX4_$cshow @ a $dShow $dSIMD4)
                  (Data.SIMD.SIMD4.$fShowX4_$cshowList @ a $dShow $dSIMD4) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fShowX4_$cshow ::
    (GHC.Show.Show a, Data.SIMD.SIMD4.SIMD4 a) =>
    Data.SIMD.SIMD4.X4 a -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Data.SIMD.SIMD4.SIMD4 a)
                   (w2 :: Data.SIMD.SIMD4.X4 a) ->
                 case Data.SIMD.SIMD4.$w$cshow @ a w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fShowX4_$cshowList ::
    (GHC.Show.Show a, Data.SIMD.SIMD4.SIMD4 a) =>
    [Data.SIMD.SIMD4.X4 a] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,C(U(U,U,U,U)),A,A,A,A,A,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   (ls :: [Data.SIMD.SIMD4.X4 a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.SIMD.SIMD4.X4 a)
                   (\ (x :: Data.SIMD.SIMD4.X4 a) (s1 :: GHC.Base.String)[OneShot] ->
                    case Data.SIMD.SIMD4.$w$cshow
                           @ a
                           $dShow
                           $dSIMD4
                           x of ww { (#,#) ww1 ww2 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                      s1 })
                   ls
                   s) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fShowX4_$cshowsPrec ::
    (GHC.Show.Show a, Data.SIMD.SIMD4.SIMD4 a) =>
    GHC.Types.Int -> Data.SIMD.SIMD4.X4 a -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><L,A><L,U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   (ds :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD4.X4 a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.SIMD.SIMD4.$fShowX4_$cshow @ a $dShow $dSIMD4 x))
                   s) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX1 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild1 { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case (GHC.Prim.writeWord64OffAddrAsWord64X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX10 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild1 { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case (GHC.Prim.writeInt64OffAddrAsInt64X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX11 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Int.Int64 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readInt64OffAddrAsInt64X4#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX12 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild2 { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case (GHC.Prim.writeInt64OffAddrAsInt64X4#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX13 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Int.Int64 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readInt64OffAddrAsInt64X4#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int640[0])) #) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX14 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild1 { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case (GHC.Prim.writeInt32OffAddrAsInt32X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX15 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Int.Int32 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readInt32OffAddrAsInt32X4#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX16 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild2 { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case (GHC.Prim.writeInt32OffAddrAsInt32X4#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX17 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Int.Int32 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readInt32OffAddrAsInt32X4#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Int32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Int320[0])) #) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX18 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild1 { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case (GHC.Prim.writeDoubleOffAddrAsDoubleX4#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX19 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Types.Double #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readDoubleOffAddrAsDoubleX4#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.DoubleX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX2 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Word.Word64 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readWord64OffAddrAsWord64X4#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX20 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild2 { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case (GHC.Prim.writeDoubleOffAddrAsDoubleX4#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX21 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readDoubleOffAddrAsDoubleX4#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.DoubleX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Double0[0])) #) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX22 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild1 { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case (GHC.Prim.writeFloatOffAddrAsFloatX4#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX23 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Types.Float #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readFloatOffAddrAsFloatX4#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.FloatX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX24 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild2 { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case (GHC.Prim.writeFloatOffAddrAsFloatX4#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX25 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Types.Float #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readFloatOffAddrAsFloatX4#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.FloatX4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Float0[0])) #) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX3 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild2 { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case (GHC.Prim.writeWord64OffAddrAsWord64X4#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                  Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
                  Data.SIMD.SIMD4.$fStorableX4_$cpeekElemOff
                  Data.SIMD.SIMD4.$fStorableX4_$cpokeElemOff
                  Data.SIMD.SIMD4.$fStorableX4_$cpeekByteOff
                  Data.SIMD.SIMD4.$fStorableX4_$cpokeByteOff
                  Data.SIMD.SIMD4.$fStorableX4_$cpeek
                  Data.SIMD.SIMD4.$fStorableX4_$cpoke -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                  Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
                  Data.SIMD.SIMD4.$fStorableX40_$cpeekElemOff
                  Data.SIMD.SIMD4.$fStorableX40_$cpokeElemOff
                  Data.SIMD.SIMD4.$fStorableX40_$cpeekByteOff
                  Data.SIMD.SIMD4.$fStorableX40_$cpokeByteOff
                  Data.SIMD.SIMD4.$fStorableX40_$cpeek
                  Data.SIMD.SIMD4.$fStorableX40_$cpoke -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX7
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX9
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD4.$fPrimX40_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX6
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX8
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX40_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild2 { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeWord32OffAddrAsWord32X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                  Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
                  Data.SIMD.SIMD4.$fStorableX41_$cpeekElemOff
                  Data.SIMD.SIMD4.$fStorableX41_$cpokeElemOff
                  Data.SIMD.SIMD4.$fStorableX41_$cpeekByteOff
                  Data.SIMD.SIMD4.$fStorableX41_$cpokeByteOff
                  Data.SIMD.SIMD4.$fStorableX41_$cpeek
                  Data.SIMD.SIMD4.$fStorableX41_$cpoke -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX11
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX13
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD4.$fPrimX41_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX10
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX12
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX41_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int640[0]) of wild2 { Data.SIMD.SIMD4.Int64X4 v1# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeInt64OffAddrAsInt64X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                  Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
                  Data.SIMD.SIMD4.$fStorableX42_$cpeekElemOff
                  Data.SIMD.SIMD4.$fStorableX42_$cpokeElemOff
                  Data.SIMD.SIMD4.$fStorableX42_$cpeekByteOff
                  Data.SIMD.SIMD4.$fStorableX42_$cpokeByteOff
                  Data.SIMD.SIMD4.$fStorableX42_$cpeek
                  Data.SIMD.SIMD4.$fStorableX42_$cpoke -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX15
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX17
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD4.$fPrimX42_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX14
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX16
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX42_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD4.D:R:X4Int320[0]) of wild2 { Data.SIMD.SIMD4.Int32X4 v1# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeInt32OffAddrAsInt32X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                  Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
                  Data.SIMD.SIMD4.$fStorableX43_$cpeekElemOff
                  Data.SIMD.SIMD4.$fStorableX43_$cpokeElemOff
                  Data.SIMD.SIMD4.$fStorableX43_$cpeekByteOff
                  Data.SIMD.SIMD4.$fStorableX43_$cpokeByteOff
                  Data.SIMD.SIMD4.$fStorableX43_$cpeek
                  Data.SIMD.SIMD4.$fStorableX43_$cpoke -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX19
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Types.Double>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX21
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Types.Double>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD4.$fPrimX43_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Types.Double>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX18
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX20
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX43_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD4.D:R:X4Double0[0]) of wild2 { Data.SIMD.SIMD4.DoubleX4 v1# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeDoubleOffAddrAsDoubleX4#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                  Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
                  Data.SIMD.SIMD4.$fStorableX44_$cpeekElemOff
                  Data.SIMD.SIMD4.$fStorableX44_$cpokeElemOff
                  Data.SIMD.SIMD4.$fStorableX44_$cpeekByteOff
                  Data.SIMD.SIMD4.$fStorableX44_$cpokeByteOff
                  Data.SIMD.SIMD4.$fStorableX44_$cpeek
                  Data.SIMD.SIMD4.$fStorableX44_$cpoke -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX23
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Types.Float>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX25
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Types.Float>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD4.$fPrimX44_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Types.Float>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX22
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX24
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX44_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD4.D:R:X4Float0[0]) of wild2 { Data.SIMD.SIMD4.FloatX4 v1# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeFloatOffAddrAsFloatX4#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX2
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX5
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD4.$fPrimX4_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX1
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD4.$fStorableX3
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX4_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word640[0]) of wild2 { Data.SIMD.SIMD4.Word64X4 v1# ->
                 case Data.SIMD.SIMD4.mul4 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeWord64OffAddrAsWord64X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX5 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Word.Word64 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readWord64OffAddrAsWord64X4#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word64X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word640[0])) #) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX6 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild1 { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case (GHC.Prim.writeWord32OffAddrAsWord32X4#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX7 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Word.Word32 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readWord32OffAddrAsWord32X4#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) #) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX8 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD4.D:R:X4Word320[0]) of wild2 { Data.SIMD.SIMD4.Word32X4 v1# ->
                 case (GHC.Prim.writeWord32OffAddrAsWord32X4#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fStorableX9 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD4.X4 GHC.Word.Word32 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readWord32OffAddrAsWord32X4#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD4.Word32X4 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD4.D:R:X4Word320[0])) #) } } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fUnboxX4 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                  Data.SIMD.SIMD4.$fVectorVectorX4
                  Data.SIMD.SIMD4.$fMVectorMVectorX4 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fUnboxX40 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                  Data.SIMD.SIMD4.$fVectorVectorX40
                  Data.SIMD.SIMD4.$fMVectorMVectorX40 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fUnboxX41 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                  Data.SIMD.SIMD4.$fVectorVectorX41
                  Data.SIMD.SIMD4.$fMVectorMVectorX41 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fUnboxX42 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                  Data.SIMD.SIMD4.$fVectorVectorX42
                  Data.SIMD.SIMD4.$fMVectorMVectorX42 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fUnboxX43 ::
    Data.Vector.Unboxed.Base.Unbox
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                  Data.SIMD.SIMD4.$fVectorVectorX43
                  Data.SIMD.SIMD4.$fMVectorMVectorX43 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fUnboxX44 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                  Data.SIMD.SIMD4.$fVectorVectorX44
                  Data.SIMD.SIMD4.$fMVectorMVectorX44 -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                  Data.SIMD.SIMD4.$fMVectorMVectorX4
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD4.X4 GHC.Word.Word64>_N)_R
                  Data.SIMD.SIMD4.$fVectorVectorX4_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD4.$fVectorVectorX4_$cbasicUnsafeThaw
                  Data.SIMD.SIMD4.$fVectorVectorX4_$cbasicLength
                  Data.SIMD.SIMD4.$fVectorVectorX4_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fVectorVectorX4_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD4.$fVectorVectorX4_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fVectorVectorX4_$celemseq -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                  Data.SIMD.SIMD4.$fMVectorMVectorX40
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD4.X4 GHC.Word.Word32>_N)_R
                  Data.SIMD.SIMD4.$fVectorVectorX40_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD4.$fVectorVectorX40_$cbasicUnsafeThaw
                  Data.SIMD.SIMD4.$fVectorVectorX40_$cbasicLength
                  Data.SIMD.SIMD4.$fVectorVectorX40_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fVectorVectorX40_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD4.$fVectorVectorX40_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fVectorVectorX40_$celemseq -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX42[0])
                           (Data.SIMD.SIMD4.N:R:VectorX41[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD4.X4
                                                                                           GHC.Word.Word32>_N)
                           (Trans
                                (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX42[0])
                           (Data.SIMD.SIMD4.N:R:VectorX41[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 16#)
                           dt2
                           (GHC.Prim.*# dt 16#)
                           (GHC.Prim.*# dt1 16#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX41[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX42[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD4.X4
                                                                                              GHC.Word.Word32>_N)
                              (Trans
                                   (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX42[0])
                           (Data.SIMD.SIMD4.N:R:VectorX41[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                   @ (m (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (Data.SIMD.SIMD4.$fPrimX40_$cindexByteArray# dt2 i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX41[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX42[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX42[0])
                              (Data.SIMD.SIMD4.N:R:VectorX41[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                      dt4
                      dt6
                      dt2 } } })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX41[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX42[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX42[0])
                              (Data.SIMD.SIMD4.N:R:VectorX41[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD4.X4 GHC.Word.Word32)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD4.X4
                                                                                            GHC.Word.Word32>_N)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX40_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word32 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word32)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32) @ b) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                  Data.SIMD.SIMD4.$fMVectorMVectorX41
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD4.X4 GHC.Int.Int64>_N)_R
                  Data.SIMD.SIMD4.$fVectorVectorX41_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD4.$fVectorVectorX41_$cbasicUnsafeThaw
                  Data.SIMD.SIMD4.$fVectorVectorX41_$cbasicLength
                  Data.SIMD.SIMD4.$fVectorVectorX41_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fVectorVectorX41_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD4.$fVectorVectorX41_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fVectorVectorX41_$celemseq -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX44[0])
                           (Data.SIMD.SIMD4.N:R:VectorX43[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD4.X4
                                                                                           GHC.Int.Int64>_N)
                           (Trans
                                (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX44[0])
                           (Data.SIMD.SIMD4.N:R:VectorX43[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 16#)
                           dt2
                           (GHC.Prim.*# dt 16#)
                           (GHC.Prim.*# dt1 16#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX43[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX44[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD4.X4
                                                                                              GHC.Int.Int64>_N)
                              (Trans
                                   (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX44[0])
                           (Data.SIMD.SIMD4.N:R:VectorX43[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                   @ (m (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (GHC.Base.return @ m $dMonad @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (Data.SIMD.SIMD4.$fPrimX41_$cindexByteArray# dt2 i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX43[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX44[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX44[0])
                              (Data.SIMD.SIMD4.N:R:VectorX43[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                      dt4
                      dt6
                      dt2 } } })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX43[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX44[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX44[0])
                              (Data.SIMD.SIMD4.N:R:VectorX43[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD4.X4 GHC.Int.Int64)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD4.X4
                                                                                            GHC.Int.Int64>_N)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX41_$celemseq ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int64 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int64)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64) @ b) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                  Data.SIMD.SIMD4.$fMVectorMVectorX42
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD4.X4 GHC.Int.Int32>_N)_R
                  Data.SIMD.SIMD4.$fVectorVectorX42_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD4.$fVectorVectorX42_$cbasicUnsafeThaw
                  Data.SIMD.SIMD4.$fVectorVectorX42_$cbasicLength
                  Data.SIMD.SIMD4.$fVectorVectorX42_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fVectorVectorX42_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD4.$fVectorVectorX42_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fVectorVectorX42_$celemseq -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX46[0])
                           (Data.SIMD.SIMD4.N:R:VectorX45[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD4.X4
                                                                                           GHC.Int.Int32>_N)
                           (Trans
                                (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX46[0])
                           (Data.SIMD.SIMD4.N:R:VectorX45[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 16#)
                           dt2
                           (GHC.Prim.*# dt 16#)
                           (GHC.Prim.*# dt1 16#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX45[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX46[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD4.X4
                                                                                              GHC.Int.Int32>_N)
                              (Trans
                                   (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX46[0])
                           (Data.SIMD.SIMD4.N:R:VectorX45[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                   @ (m (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (GHC.Base.return @ m $dMonad @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (Data.SIMD.SIMD4.$fPrimX42_$cindexByteArray# dt2 i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX45[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX46[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX46[0])
                              (Data.SIMD.SIMD4.N:R:VectorX45[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                      dt4
                      dt6
                      dt2 } } })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX45[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX46[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX46[0])
                              (Data.SIMD.SIMD4.N:R:VectorX45[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD4.X4 GHC.Int.Int32)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD4.X4
                                                                                            GHC.Int.Int32>_N)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX42_$celemseq ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    -> Data.SIMD.SIMD4.X4 GHC.Int.Int32 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Int.Int32)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32) @ b) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                  Data.SIMD.SIMD4.$fMVectorMVectorX43
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD4.X4 GHC.Types.Double>_N)_R
                  Data.SIMD.SIMD4.$fVectorVectorX43_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD4.$fVectorVectorX43_$cbasicUnsafeThaw
                  Data.SIMD.SIMD4.$fVectorVectorX43_$cbasicLength
                  Data.SIMD.SIMD4.$fVectorVectorX43_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fVectorVectorX43_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD4.$fVectorVectorX43_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fVectorVectorX43_$celemseq -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX48[0])
                           (Data.SIMD.SIMD4.N:R:VectorX47[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD4.X4
                                                                                           GHC.Types.Double>_N)
                           (Trans
                                (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX48[0])
                           (Data.SIMD.SIMD4.N:R:VectorX47[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 16#)
                           dt2
                           (GHC.Prim.*# dt 16#)
                           (GHC.Prim.*# dt1 16#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX47[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX48[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD4.X4
                                                                                              GHC.Types.Double>_N)
                              (Trans
                                   (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX48[0])
                           (Data.SIMD.SIMD4.N:R:VectorX47[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                   @ (m (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (Data.SIMD.SIMD4.$fPrimX43_$cindexByteArray# dt2 i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX47[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX48[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX48[0])
                              (Data.SIMD.SIMD4.N:R:VectorX47[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                      dt4
                      dt6
                      dt2 } } })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX47[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX48[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX48[0])
                              (Data.SIMD.SIMD4.N:R:VectorX47[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Double))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD4.X4 GHC.Types.Double)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD4.X4
                                                                                            GHC.Types.Double>_N)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX43_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Double -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Double)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD4.X4 GHC.Types.Double) @ b) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                  Data.SIMD.SIMD4.$fMVectorMVectorX44
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD4.X4 GHC.Types.Float>_N)_R
                  Data.SIMD.SIMD4.$fVectorVectorX44_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD4.$fVectorVectorX44_$cbasicUnsafeThaw
                  Data.SIMD.SIMD4.$fVectorVectorX44_$cbasicLength
                  Data.SIMD.SIMD4.$fVectorVectorX44_$cbasicUnsafeSlice
                  Data.SIMD.SIMD4.$fVectorVectorX44_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD4.$fVectorVectorX44_$cbasicUnsafeCopy
                  Data.SIMD.SIMD4.$fVectorVectorX44_$celemseq -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX410[0])
                           (Data.SIMD.SIMD4.N:R:VectorX49[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD4.X4
                                                                                           GHC.Types.Float>_N)
                           (Trans
                                (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX410[0])
                           (Data.SIMD.SIMD4.N:R:VectorX49[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 16#)
                           dt2
                           (GHC.Prim.*# dt 16#)
                           (GHC.Prim.*# dt1 16#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX49[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX410[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD4.X4
                                                                                              GHC.Types.Float>_N)
                              (Trans
                                   (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX410[0])
                           (Data.SIMD.SIMD4.N:R:VectorX49[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                   @ (m (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (Data.SIMD.SIMD4.$fPrimX44_$cindexByteArray# dt2 i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX49[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX410[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX410[0])
                              (Data.SIMD.SIMD4.N:R:VectorX49[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                      dt4
                      dt6
                      dt2 } } })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Types.Float))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX49[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX410[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX410[0])
                              (Data.SIMD.SIMD4.N:R:VectorX49[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Types.Float))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD4.X4 GHC.Types.Float)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD4.X4
                                                                                            GHC.Types.Float>_N)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX44_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    -> Data.SIMD.SIMD4.X4 GHC.Types.Float -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Types.Float)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD4.X4 GHC.Types.Float) @ b) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX40[0])
                           (Data.SIMD.SIMD4.N:R:VectorX4[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD4.X4
                                                                                           GHC.Word.Word64>_N)
                           (Trans
                                (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX40[0])
                           (Data.SIMD.SIMD4.N:R:VectorX4[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 16#)
                           dt2
                           (GHC.Prim.*# dt 16#)
                           (GHC.Prim.*# dt1 16#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX4[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX40[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD4.X4
                                                                                              GHC.Word.Word64>_N)
                              (Trans
                                   (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD4.D:R:VectorX40[0])
                           (Data.SIMD.SIMD4.N:R:VectorX4[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                   @ (m (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (Data.SIMD.SIMD4.$fPrimX4_$cindexByteArray# dt2 i#) } }) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:VectorX4[0]))
                             (Sym (Data.SIMD.SIMD4.D:R:VectorX40[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX40[0])
                              (Data.SIMD.SIMD4.N:R:VectorX4[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                      dt4
                      dt6
                      dt2 } } })) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD4.N:R:MVectorsX4[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD4.D:R:MVectorsX40[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD4.D:R:VectorX40[0])
                              (Data.SIMD.SIMD4.N:R:VectorX4[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD4.X4 GHC.Word.Word64)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD4.X4
                                                                                            GHC.Word.Word64>_N)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $fVectorVectorX4_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    -> Data.SIMD.SIMD4.X4 GHC.Word.Word64 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD4.X4 GHC.Word.Word64)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64) @ b) -}
e5b2f75f97cca368f272a346f02f719c
  $tc'C:SIMD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SIMD4"#) -}
1072a9cf876fce70cdb1e5b51ec35dd0
  $tc'C:SIMD4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7895288929776725341##
                   6750835349778784292##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tc'C:SIMD1) -}
f8c5087b3d47ce00a0c5cc711473984b
  $tc'C:SIMD4Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3449755424873292985##
                   13336832221802407979##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tc'C:SIMD4Float1) -}
fa44a70e41fdc7fa8653e1e05241028e
  $tc'C:SIMD4Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SIMD4Float"#) -}
9e873a61df73e242cf1d4e83fc70927c
  $tc'UnsafePrimVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12135376592966569982##
                   16644702108389748833##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tc'UnsafePrimVector1) -}
b87209805157118d483de3c6bc6a8547
  $tc'UnsafePrimVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnsafePrimVector"#) -}
96009f5107f440598705c8d4931caa71
  $tcSIMD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SIMD4"#) -}
c3dce250a8eff0c3cf1d861dc30765fd
  $tcSIMD4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2977352573562092972##
                   15808866841216818069##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tcSIMD1) -}
8ccd5f9645512d5f8159ec6308317fe5
  $tcSIMD4Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9413844028441797903##
                   4125189631869736611##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tcSIMD4Float1) -}
385b26e9f45666986af88f8fa6af083c
  $tcSIMD4Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SIMD4Float"#) -}
78ffd6d80950160de2ff3549bb302877
  $tcUnsafePrimVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1006193074243006771##
                   10112051622830528840##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tcUnsafePrimVector1) -}
7ac86bf20ee8bb5d63e1db4972a1d628
  $tcUnsafePrimVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UnsafePrimVector"#) -}
e6c9644df38e9363d6a6ffd94f8c8d30
  $tcX1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "X4"#) -}
c859021bb80e66b16b3a591126dfbd19
  $tcX4 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13370217969415086598##
                   3321924216128553619##
                   Data.SIMD.SIMD4.$trModule
                   Data.SIMD.SIMD4.$tcX1) -}
504c19027d4bab413b4e52ad1a7803e7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.SIMD.SIMD4.$trModule2
                   Data.SIMD.SIMD4.$trModule1) -}
510d3ab8b7da9a6f934478e3ec483768
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.SIMD.SIMD4"#) -}
8cd91219830e23bfea39485048820ddc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8afc684387cc7fc9016e496b4fdc0355
  $w$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 16#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 16#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 16#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
3e4bcb810d7be04fce71725781cba177
  $w$cbasicUnsafeMove1 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 16#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 16#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 16#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
328b4bf0f37950b0cfaf2f3456b6e9c1
  $w$cbasicUnsafeMove2 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 16#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 16#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 16#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
bc858911ed293bb9a7145a9295e2037f
  $w$cbasicUnsafeMove3 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 16#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 16#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 16#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
62fa89f820dacec0ea4462cf82690d43
  $w$cbasicUnsafeMove4 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 16#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 16#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 16#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
dbdce58b4754eb19119481a855e4d91a
  $w$cbasicUnsafeMove5 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 16#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 16#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 16#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
08c56e271d21348b8f7981bc71dd0fe2
  $w$cshow ::
    (GHC.Show.Show a, Data.SIMD.SIMD4.SIMD4 a) =>
    Data.SIMD.SIMD4.X4 a -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U)),A,A,A,A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Data.SIMD.SIMD4.SIMD4 a)
                   (w2 :: Data.SIMD.SIMD4.X4 a) ->
                 case Data.SIMD.SIMD4.unpackX4
                        @ a
                        w1
                        w2 of ds { (#,,,#) ipv ipv1 ipv2 ipv3 ->
                 GHC.Show.$w$cshowsPrec5
                   @ a
                   @ a
                   @ a
                   @ a
                   w
                   w
                   w
                   w
                   ipv
                   ipv1
                   ipv2
                   ipv3
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:MVectorsX40::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
        = Data.SIMD.SIMD4.R:MVectorsX4 s
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:MVectorsX410::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
        = Data.SIMD.SIMD4.R:MVectorsX49 s
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:MVectorsX42::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
        = Data.SIMD.SIMD4.R:MVectorsX41 s
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:MVectorsX44::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
        = Data.SIMD.SIMD4.R:MVectorsX43 s
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:MVectorsX46::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
        = Data.SIMD.SIMD4.R:MVectorsX45 s
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:MVectorsX48::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
        = Data.SIMD.SIMD4.R:MVectorsX47 s
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:VectorX40::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
        = Data.SIMD.SIMD4.R:VectorX4
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:VectorX410::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD4.X4 GHC.Types.Float)
        = Data.SIMD.SIMD4.R:VectorX49
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:VectorX42::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
        = Data.SIMD.SIMD4.R:VectorX41
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:VectorX44::
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
        = Data.SIMD.SIMD4.R:VectorX43
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:VectorX46::
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
        = Data.SIMD.SIMD4.R:VectorX45
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:VectorX48::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD4.X4 GHC.Types.Double)
        = Data.SIMD.SIMD4.R:VectorX47
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:X4Double0::
      Data.SIMD.SIMD4.X4 GHC.Types.Double = Data.SIMD.SIMD4.R:X4Double
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:X4Float0::
      Data.SIMD.SIMD4.X4 GHC.Types.Float = Data.SIMD.SIMD4.R:X4Float
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:X4Int320::
      Data.SIMD.SIMD4.X4 GHC.Int.Int32 = Data.SIMD.SIMD4.R:X4Int32
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:X4Int640::
      Data.SIMD.SIMD4.X4 GHC.Int.Int64 = Data.SIMD.SIMD4.R:X4Int64
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:X4Word320::
      Data.SIMD.SIMD4.X4 GHC.Word.Word32 = Data.SIMD.SIMD4.R:X4Word32
08c56e271d21348b8f7981bc71dd0fe2
  axiom D:R:X4Word640::
      Data.SIMD.SIMD4.X4 GHC.Word.Word64 = Data.SIMD.SIMD4.R:X4Word64
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    = MV_Word64X4 (Data.Vector.Primitive.Mutable.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    = MV_Word32X4 (Data.Vector.Primitive.Mutable.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    = MV_Int64X4 (Data.Vector.Primitive.Mutable.MVector
                    s (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    = MV_Int32X4 (Data.Vector.Primitive.Mutable.MVector
                    s (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    = MV_DoubleX4 (Data.Vector.Primitive.Mutable.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Types.Double))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    = MV_FloatX4 (Data.Vector.Primitive.Mutable.MVector
                    s (Data.SIMD.SIMD4.X4 GHC.Types.Float))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
    = V_Word64X4 (Data.Vector.Primitive.Vector
                    (Data.SIMD.SIMD4.X4 GHC.Word.Word64))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
    = V_Word32X4 (Data.Vector.Primitive.Vector
                    (Data.SIMD.SIMD4.X4 GHC.Word.Word32))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
    = V_Int64X4 (Data.Vector.Primitive.Vector
                   (Data.SIMD.SIMD4.X4 GHC.Int.Int64))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
    = V_Int32X4 (Data.Vector.Primitive.Vector
                   (Data.SIMD.SIMD4.X4 GHC.Int.Int32))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD4.X4 GHC.Types.Double)
    = V_DoubleX4 (Data.Vector.Primitive.Vector
                    (Data.SIMD.SIMD4.X4 GHC.Types.Double))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD4.X4 GHC.Types.Float)
    = V_FloatX4 (Data.Vector.Primitive.Vector
                   (Data.SIMD.SIMD4.X4 GHC.Types.Float))
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  data instance Data.SIMD.SIMD4.X4 GHC.Types.Double
    = DoubleX4 GHC.Prim.DoubleX4#
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  data instance Data.SIMD.SIMD4.X4 GHC.Types.Float
    = FloatX4 GHC.Prim.FloatX4#
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  data instance Data.SIMD.SIMD4.X4 GHC.Int.Int32
    = Int32X4 GHC.Prim.Int32X4#
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  data instance Data.SIMD.SIMD4.X4 GHC.Int.Int64
    = Int64X4 GHC.Prim.Int64X4#
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  data instance Data.SIMD.SIMD4.X4 GHC.Word.Word32
    = Word32X4 GHC.Prim.Word32X4#
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  data instance Data.SIMD.SIMD4.X4 GHC.Word.Word64
    = Word64X4 GHC.Prim.Word64X4#
    RecFlag: Recursive
08c56e271d21348b8f7981bc71dd0fe2
  class SIMD4 a where
    data family X4 a
    plusX4 :: Data.SIMD.SIMD4.X4 a
              -> Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
    minusX4 :: Data.SIMD.SIMD4.X4 a
               -> Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
    timesX4 :: Data.SIMD.SIMD4.X4 a
               -> Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
    negateX4 :: Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
    indexArrayAsX4 :: Data.Primitive.ByteArray.ByteArray
                      -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 a
    indexOffAddrAsX4 :: Data.Primitive.Types.Addr
                        -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 a
    insertX4 :: Data.SIMD.SIMD4.X4 a
                -> a -> GHC.Types.Int -> Data.SIMD.SIMD4.X4 a
    unpackX4 :: Data.SIMD.SIMD4.X4 a -> (# a, a, a, a #)
    packX4 :: (# a, a, a, a #) -> Data.SIMD.SIMD4.X4 a
    broadcastX4 :: a -> Data.SIMD.SIMD4.X4 a
    readOffAddrAsX4 :: GHC.Prim.Addr#
                       -> GHC.Prim.Int#
                       -> GHC.Prim.State# s
                       -> (# GHC.Prim.State# s, Data.SIMD.SIMD4.X4 a #)
    writeOffAddrAsX4 :: GHC.Prim.Addr#
                        -> GHC.Prim.Int#
                        -> Data.SIMD.SIMD4.X4 a
                        -> GHC.Prim.State# s
                        -> GHC.Prim.State# s
    plusHorizontalX4 :: (Data.SIMD.SIMD4.SIMD4 a, GHC.Num.Num a) =>
                        Data.SIMD.SIMD4.X4 a -> a
    timesHorizontalX4 :: (Data.SIMD.SIMD4.SIMD4 a, GHC.Num.Num a) =>
                         Data.SIMD.SIMD4.X4 a -> a
    RecFlag: Recursive
    {-# MINIMAL plusX4, minusX4, timesX4, negateX4, indexArrayAsX4,
                indexOffAddrAsX4, insertX4, unpackX4, packX4, broadcastX4,
                readOffAddrAsX4, writeOffAddrAsX4 #-}
08c56e271d21348b8f7981bc71dd0fe2
  class Data.SIMD.SIMD4.SIMD4 a => SIMD4Float a where
    divideX4 :: Data.SIMD.SIMD4.X4 a
                -> Data.SIMD.SIMD4.X4 a -> Data.SIMD.SIMD4.X4 a
    {-# MINIMAL divideX4 #-}
794dad46506b7050b73c3ac256b3332d
  type role UnsafePrimVector phantom
  data UnsafePrimVector a
    = UnsafePrimVector {-# UNPACK #-}GHC.Types.Int
                       {-# UNPACK #-}GHC.Types.Int
                       {-# UNPACK #-}Data.Primitive.ByteArray.ByteArray
40e962cd397073250ad29c352e4cd166
  mul4 :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (i# :: GHC.Prim.Int#) -> GHC.Prim.*# i# 4#) -}
bd4dc52a3589c14d0ecea116718afb14
  unI# :: GHC.Types.Int -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# i# -> i# }) -}
d18b5ae4789f89e9166e1a3bc4798d50
  unVectorizeStorableX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Foreign.Storable.Storable a,
     Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 a)) =>
    Data.Vector.Storable.Vector (Data.SIMD.SIMD4.X4 a)
    -> Data.Vector.Storable.Vector a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><S(SSL),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dStorable :: Foreign.Storable.Storable a)
                   ($dStorable1 :: Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 a))
                   (v :: Data.Vector.Storable.Vector (Data.SIMD.SIMD4.X4 a)) ->
                 case v of wild { Data.Vector.Storable.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c*
                        (GHC.Types.I# dt)
                        (GHC.Types.I# 4#) of dt4 { GHC.Types.I# dt5 ->
                 case GHC.ForeignPtr.castForeignPtr
                        @ (Data.SIMD.SIMD4.X4 a)
                        @ a
                        (GHC.ForeignPtr.ForeignPtr
                           @ (Data.SIMD.SIMD4.X4 a)
                           dt1
                           dt2) of dt6 { GHC.ForeignPtr.ForeignPtr dt7 dt8 ->
                 Data.Vector.Storable.Vector @ a dt5 dt7 dt8 } } }) -}
31eb4ab4adf90f37be3c1d63edf07771
  unVectorizeUnboxedX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Data.Vector.Unboxed.Base.Unbox a) =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a)
    -> Data.Vector.Unboxed.Base.Vector a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox a)
                   (v :: Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a)) ->
                 case Unsafe.Coerce.unsafeCoerce
                        @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a))
                        @ (Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any)
                        v of wild { Data.SIMD.SIMD4.UnsafePrimVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c*
                        (GHC.Types.I# dt)
                        (GHC.Types.I# 4#) of dt3 { GHC.Types.I# dt4 ->
                 case GHC.Num.$fNumInt_$c*
                        (GHC.Types.I# dt1)
                        (GHC.Types.I# 4#) of dt5 { GHC.Types.I# dt6 ->
                 Unsafe.Coerce.unsafeCoerce
                   @ (Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any)
                   @ (Data.Vector.Unboxed.Base.Vector a)
                   (Data.SIMD.SIMD4.UnsafePrimVector
                      @ GHC.Prim.Any
                      dt4
                      dt6
                      dt2) } } }) -}
543847cc6dc70cc7c00e4231e4d1efff
  unsafeVectorizeUnboxedX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Data.Vector.Unboxed.Base.Unbox a) =>
    Data.Vector.Unboxed.Base.Vector a
    -> Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox a)
                   (v :: Data.Vector.Unboxed.Base.Vector a) ->
                 case Unsafe.Coerce.unsafeCoerce
                        @ (Data.Vector.Unboxed.Base.Vector a)
                        @ (Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any)
                        v of wild { Data.SIMD.SIMD4.UnsafePrimVector dt dt1 dt2 ->
                 case GHC.Real.$fIntegralInt_$cdiv
                        (GHC.Types.I# dt)
                        (GHC.Types.I# 4#) of dt3 { GHC.Types.I# dt4 ->
                 case GHC.Real.$fIntegralInt_$cdiv
                        (GHC.Types.I# dt1)
                        (GHC.Types.I# 4#) of dt5 { GHC.Types.I# dt6 ->
                 Unsafe.Coerce.unsafeCoerce
                   @ (Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any)
                   @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a))
                   (Data.SIMD.SIMD4.UnsafePrimVector
                      @ GHC.Prim.Any
                      dt4
                      dt6
                      dt2) } } }) -}
36e06e14a8649b53fe968fd2bb00d320
  vectorizeStorableX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Foreign.Storable.Storable a,
     Foreign.Storable.Storable (Data.SIMD.SIMD4.X4 a)) =>
    Data.Vector.Storable.Vector a
    -> Data.Vector.Storable.Vector (Data.SIMD.SIMD4.X4 a)
  {- Arity: 4, Strictness: <L,A><L,A><L,A><S(SSL),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dStorable :: Foreign.Storable.Storable a)
                   ($dStorable1 :: Foreign.Storable.Storable
                                     (Data.SIMD.SIMD4.X4 a)) ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD4"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD4.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 404#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 10#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 404#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 54#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (v :: Data.Vector.Storable.Vector a) ->
                 let {
                   ds :: (GHC.ForeignPtr.ForeignPtr a, GHC.Types.Int)
                   = case v of wild { Data.Vector.Storable.Vector dt dt1 dt2 ->
                     (GHC.ForeignPtr.ForeignPtr @ a dt1 dt2, GHC.Types.I# dt) }
                 } in
                 let {
                   len :: GHC.Types.Int = case ds of wild { (,) fp len1 -> len1 }
                 } in
                 case GHC.Classes.eqInt
                        (GHC.Real.$fIntegralInt_$cmod len (GHC.Types.I# 4#))
                        (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Storable.Vector (Data.SIMD.SIMD4.X4 a))
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "vectorizeStorableX4 vector wrong len"#))
                   GHC.Types.True
                   -> case GHC.Real.$fIntegralInt_$cdiv
                             len
                             (GHC.Types.I# 4#) of dt { GHC.Types.I# dt1 ->
                      case ds of wild1 { (,) fp len1 ->
                      case GHC.ForeignPtr.castForeignPtr
                             @ a
                             @ (Data.SIMD.SIMD4.X4 a)
                             fp of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                      Data.Vector.Storable.Vector
                        @ (Data.SIMD.SIMD4.X4 a)
                        dt1
                        dt3
                        dt4 } } } }) -}
b01743b28c8df5d70ece6a1314d2b79a
  vectorizeUnboxedX4 ::
    (Data.SIMD.SIMD4.SIMD4 a, Data.Vector.Unboxed.Base.Unbox a) =>
    Data.Vector.Unboxed.Base.Vector a
    -> Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a)
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dSIMD4 :: Data.SIMD.SIMD4.SIMD4 a)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox a) ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD4"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD4.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 379#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 10#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 379#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 60#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (v :: Data.Vector.Unboxed.Base.Vector a) ->
                 let {
                   ds :: Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any
                   = Unsafe.Coerce.unsafeCoerce
                       @ (Data.Vector.Unboxed.Base.Vector a)
                       @ (Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any)
                       v
                 } in
                 let {
                   len :: GHC.Types.Int
                   = case ds of wild { Data.SIMD.SIMD4.UnsafePrimVector dt dt1 dt2 ->
                     GHC.Types.I# dt }
                 } in
                 let {
                   off :: GHC.Types.Int
                   = case ds of wild { Data.SIMD.SIMD4.UnsafePrimVector dt dt1 dt2 ->
                     GHC.Types.I# dt1 }
                 } in
                 case GHC.Classes.&&
                        (GHC.Classes.eqInt
                           (GHC.Real.$fIntegralInt_$cmod len (GHC.Types.I# 4#))
                           (GHC.Types.I# 0#))
                        (GHC.Classes.eqInt
                           (GHC.Real.$fIntegralInt_$cmod off (GHC.Types.I# 4#))
                           (GHC.Types.I# 0#)) of wild {
                   GHC.Types.False
                   -> GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a))
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "vectorizeUnboxedX4 vector wrong len/offset"#))
                   GHC.Types.True
                   -> case GHC.Real.$fIntegralInt_$cdiv
                             len
                             (GHC.Types.I# 4#) of dt { GHC.Types.I# dt1 ->
                      case GHC.Real.$fIntegralInt_$cdiv
                             off
                             (GHC.Types.I# 4#) of dt2 { GHC.Types.I# dt3 ->
                      case ds of wild1 { Data.SIMD.SIMD4.UnsafePrimVector dt4 dt5 dt6 ->
                      Unsafe.Coerce.unsafeCoerce
                        @ (Data.SIMD.SIMD4.UnsafePrimVector GHC.Prim.Any)
                        @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD4.X4 a))
                        (Data.SIMD.SIMD4.UnsafePrimVector
                           @ GHC.Prim.Any
                           dt1
                           dt3
                           dt6) } } } }) -}
instance GHC.Real.Fractional [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fFractionalX4
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fMVectorMVectorX4
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fMVectorMVectorX40
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fMVectorMVectorX41
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fMVectorMVectorX42
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fMVectorMVectorX43
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fMVectorMVectorX44
instance GHC.Num.Num [Data.SIMD.SIMD4.X4] = Data.SIMD.SIMD4.$fNumX4
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fPrimX4
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fPrimX40
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fPrimX41
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fPrimX42
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fPrimX43
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fPrimX44
instance Data.SIMD.SIMD4.SIMD4 [GHC.Types.Double]
  = Data.SIMD.SIMD4.$fSIMD4Double
instance Data.SIMD.SIMD4.SIMD4 [GHC.Types.Float]
  = Data.SIMD.SIMD4.$fSIMD4Float
instance Data.SIMD.SIMD4.SIMD4Float [GHC.Types.Double]
  = Data.SIMD.SIMD4.$fSIMD4FloatDouble
instance Data.SIMD.SIMD4.SIMD4Float [GHC.Types.Float]
  = Data.SIMD.SIMD4.$fSIMD4FloatFloat
instance Data.SIMD.SIMD4.SIMD4 [GHC.Int.Int32]
  = Data.SIMD.SIMD4.$fSIMD4Int32
instance Data.SIMD.SIMD4.SIMD4 [GHC.Int.Int64]
  = Data.SIMD.SIMD4.$fSIMD4Int64
instance Data.SIMD.SIMD4.SIMD4 [GHC.Word.Word32]
  = Data.SIMD.SIMD4.$fSIMD4Word32
instance Data.SIMD.SIMD4.SIMD4 [GHC.Word.Word64]
  = Data.SIMD.SIMD4.$fSIMD4Word64
instance GHC.Show.Show [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fShowX4
instance Foreign.Storable.Storable [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fStorableX4
instance Foreign.Storable.Storable [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fStorableX40
instance Foreign.Storable.Storable [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fStorableX41
instance Foreign.Storable.Storable [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fStorableX42
instance Foreign.Storable.Storable [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fStorableX43
instance Foreign.Storable.Storable [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fStorableX44
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fUnboxX4
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fUnboxX40
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fUnboxX41
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fUnboxX42
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fUnboxX43
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fUnboxX44
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fVectorVectorX4
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fVectorVectorX40
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fVectorVectorX41
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fVectorVectorX42
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fVectorVectorX43
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.$fVectorVectorX44
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:MVectorsX410
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:MVectorsX48
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:MVectorsX46
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:MVectorsX44
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:MVectorsX42
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:MVectorsX40
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:VectorX410
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:VectorX48
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:VectorX46
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:VectorX44
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:VectorX42
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD4.X4]
  = Data.SIMD.SIMD4.D:R:VectorX40
family instance Data.SIMD.SIMD4.X4 [GHC.Types.Float]
  = Data.SIMD.SIMD4.D:R:X4Float0
family instance Data.SIMD.SIMD4.X4 [GHC.Types.Double]
  = Data.SIMD.SIMD4.D:R:X4Double0
family instance Data.SIMD.SIMD4.X4 [GHC.Word.Word32]
  = Data.SIMD.SIMD4.D:R:X4Word320
family instance Data.SIMD.SIMD4.X4 [GHC.Word.Word64]
  = Data.SIMD.SIMD4.D:R:X4Word640
family instance Data.SIMD.SIMD4.X4 [GHC.Int.Int32]
  = Data.SIMD.SIMD4.D:R:X4Int320
family instance Data.SIMD.SIMD4.X4 [GHC.Int.Int64]
  = Data.SIMD.SIMD4.D:R:X4Int640
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicLength @ (X4 Double)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                  (Data.SIMD.SIMD4.X4
                                                                                                     GHC.Types.Double))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD4.X4
                                                                     GHC.Types.Double)
                                                                $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicLength @ (X4 Float)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                 (Data.SIMD.SIMD4.X4
                                                                                                    GHC.Types.Float))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD4.X4
                                                                     GHC.Types.Float)
                                                                $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicLength @ (X4 Int32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                 (Data.SIMD.SIMD4.X4
                                                                                                    GHC.Int.Int32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD4.X4
                                                                     GHC.Int.Int32)
                                                                $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicLength @ (X4 Int64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                 (Data.SIMD.SIMD4.X4
                                                                                                    GHC.Int.Int64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD4.X4
                                                                     GHC.Int.Int64)
                                                                $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicLength @ (X4 Word32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                  (Data.SIMD.SIMD4.X4
                                                                                                     GHC.Word.Word32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD4.X4
                                                                     GHC.Word.Word32)
                                                                $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicLength @ (X4 Word64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                  (Data.SIMD.SIMD4.X4
                                                                                                     GHC.Word.Word64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD4.X4
                                                                     GHC.Word.Word64)
                                                                $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicUnsafeSlice @ (X4
                                                               Double)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                      (Data.SIMD.SIMD4.X4
                                                                                                                                                                         GHC.Types.Double))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD4.X4
                                                                          GHC.Types.Double)
                                                                     $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX43_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicUnsafeSlice @ (X4
                                                               Float)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                     (Data.SIMD.SIMD4.X4
                                                                                                                                                                        GHC.Types.Float))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD4.X4
                                                                          GHC.Types.Float)
                                                                     $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX44_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicUnsafeSlice @ (X4
                                                               Int32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                     (Data.SIMD.SIMD4.X4
                                                                                                                                                                        GHC.Int.Int32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD4.X4
                                                                          GHC.Int.Int32)
                                                                     $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX42_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicUnsafeSlice @ (X4
                                                               Int64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                     (Data.SIMD.SIMD4.X4
                                                                                                                                                                        GHC.Int.Int64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD4.X4
                                                                          GHC.Int.Int64)
                                                                     $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX41_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicUnsafeSlice @ (X4
                                                               Word32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                      (Data.SIMD.SIMD4.X4
                                                                                                                                                                         GHC.Word.Word32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD4.X4
                                                                          GHC.Word.Word32)
                                                                     $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX40_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD4 $fMVectorMVectora_$cbasicUnsafeSlice @ (X4
                                                               Word64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                      (Data.SIMD.SIMD4.X4
                                                                                                                                                                         GHC.Word.Word64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD4.X4
                                                                          GHC.Word.Word64)
                                                                     $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX4_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD4 alignment @ (X4 Double)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                            (Data.SIMD.SIMD4.X4
                                                                               GHC.Types.Double))
  Data.Primitive.alignment @ (Data.SIMD.SIMD4.X4 GHC.Types.Double)
                           $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX43_$salignment
"SPEC/Data.SIMD.SIMD4 alignment @ (X4 Float)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                           (Data.SIMD.SIMD4.X4
                                                                              GHC.Types.Float))
  Data.Primitive.alignment @ (Data.SIMD.SIMD4.X4 GHC.Types.Float)
                           $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX44_$salignment
"SPEC/Data.SIMD.SIMD4 alignment @ (X4 Int32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                           (Data.SIMD.SIMD4.X4
                                                                              GHC.Int.Int32))
  Data.Primitive.alignment @ (Data.SIMD.SIMD4.X4 GHC.Int.Int32)
                           $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX42_$salignment
"SPEC/Data.SIMD.SIMD4 alignment @ (X4 Int64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                           (Data.SIMD.SIMD4.X4
                                                                              GHC.Int.Int64))
  Data.Primitive.alignment @ (Data.SIMD.SIMD4.X4 GHC.Int.Int64)
                           $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX41_$salignment
"SPEC/Data.SIMD.SIMD4 alignment @ (X4 Word32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                            (Data.SIMD.SIMD4.X4
                                                                               GHC.Word.Word32))
  Data.Primitive.alignment @ (Data.SIMD.SIMD4.X4 GHC.Word.Word32)
                           $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX40_$salignment
"SPEC/Data.SIMD.SIMD4 alignment @ (X4 Word64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                            (Data.SIMD.SIMD4.X4
                                                                               GHC.Word.Word64))
  Data.Primitive.alignment @ (Data.SIMD.SIMD4.X4 GHC.Word.Word64)
                           $dPrim
  = Data.SIMD.SIMD4.$fMVectorMVectorX4_$salignment
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

