
==================== FINAL INTERFACE ====================
2017-11-15 14:25:23.83378734 UTC

interface main@main:Data.SIMD.SIMD8 [family instance module] 8002
  interface hash: 85f8aaaadd2fab6102a77265540013ab
  ABI hash: 185fe3c6b7bbd2e45756a78b3fcfd96c
  export-list hash: 85e24c9a226145e91fbda25db57e7f3a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 66690bd91dbcbc41379c22bbd1184eae
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.SIMD.SIMD8.unVectorizeStorableX8
  Data.SIMD.SIMD8.unVectorizeUnboxedX8
  Data.SIMD.SIMD8.unsafeVectorizeUnboxedX8
  Data.SIMD.SIMD8.vectorizeStorableX8
  Data.SIMD.SIMD8.vectorizeUnboxedX8
  Data.SIMD.SIMD8.SIMD8{Data.SIMD.SIMD8.X8 Data.SIMD.SIMD8.broadcastX8 Data.SIMD.SIMD8.indexArrayAsX8 Data.SIMD.SIMD8.indexOffAddrAsX8 Data.SIMD.SIMD8.insertX8 Data.SIMD.SIMD8.minusX8 Data.SIMD.SIMD8.negateX8 Data.SIMD.SIMD8.packX8 Data.SIMD.SIMD8.plusHorizontalX8 Data.SIMD.SIMD8.plusX8 Data.SIMD.SIMD8.readOffAddrAsX8 Data.SIMD.SIMD8.timesHorizontalX8 Data.SIMD.SIMD8.timesX8 Data.SIMD.SIMD8.unpackX8 Data.SIMD.SIMD8.writeOffAddrAsX8}
  Data.SIMD.SIMD8.SIMD8Float{Data.SIMD.SIMD8.divideX8}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Foreign.ForeignPtr a57f95ad34cceecd3d53cb6caf640c90
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.ForeignPtr 20e761047d2a09f17f566a747b24664a
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Unsafe.Coerce 04e2cc33f45c897c8f9bc8758fbe5bc2
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Prim 00000000000000000000000000000000
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive 6f29f7c5aeee7400d08244e0179fc37e
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive 81a30c7a1647fac99d2d6543eb368389
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.ByteArray 964d9bcdac1264cfa972c8e8626bdb30
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.MachDeps c041859a6dbfc20753950012e5093cc3
import  -/  primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Types 75b5f702872d4600fa310bbb0b9d2842
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic a46330d7de2e0b42909dfd32f5d6e1c7
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Base cc8aa91ea5282728711af3acbbd89d22
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Mutable c96042d36416e177dccaa53d194ed45c
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Generic.Mutable.Base 8a2e6d400f73e59e3e07e138aec6487c
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive 5b849c3732a15799f9bf28a09f4431fb
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive.Mutable a22e83fa724b75a9283cb68e119ac595
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable 04ed1592bd7110fbf63072fadb404678
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable.Mutable 8f466b34b141674bb6f86b479a6c7c18
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed 9a83f9d7fe08173e41bd9e83acd887dc
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base 5b746d7e99b6b2dacbd3d043cb3d3d35
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Mutable 2c297fa2c086e5a2758d3c59de36878e
addDependentFile "/nix/store/fvf278s3lqsjv488ahhdi8jx6i0qzsr9-ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/nix/store/gv0qd9ymil4r9xbwpx8523vy6jlvwazi-glibc-2.25-dev/include/stdc-predef.h"
4797721c96f318c8e6213d03ed54a573
  $dmplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Data.SIMD.SIMD8.SIMD8 a,
     GHC.Num.Num a) =>
    Data.SIMD.SIMD8.X8 a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><L,A><S(C(C(S))LLLLLL),U(C(C1(U)),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dSIMD1 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dNum :: GHC.Num.Num a)
                   (v :: Data.SIMD.SIMD8.X8 a) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ a
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ a
                   $dNum
                   (GHC.Num.+
                      @ a
                      $dNum
                      (GHC.Num.+
                         @ a
                         $dNum
                         (GHC.Num.+
                            @ a
                            $dNum
                            (GHC.Num.+
                               @ a
                               $dNum
                               (GHC.Num.+ @ a $dNum (GHC.Num.+ @ a $dNum ipv ipv1) ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
23fe231c3f57da3e6fa4ff1ce2e44e57
  $dmtimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Data.SIMD.SIMD8.SIMD8 a,
     GHC.Num.Num a) =>
    Data.SIMD.SIMD8.X8 a -> a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><L,A><S(LLC(C(S))LLLL),U(A,A,C(C1(U)),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dSIMD1 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dNum :: GHC.Num.Num a)
                   (v :: Data.SIMD.SIMD8.X8 a) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ a
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ a
                   $dNum
                   (GHC.Num.*
                      @ a
                      $dNum
                      (GHC.Num.*
                         @ a
                         $dNum
                         (GHC.Num.*
                            @ a
                            $dNum
                            (GHC.Num.*
                               @ a
                               $dNum
                               (GHC.Num.* @ a $dNum (GHC.Num.* @ a $dNum ipv ipv1) ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fFractionalX8 ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD8.SIMD8Float a) =>
    GHC.Real.Fractional (Data.SIMD.SIMD8.X8 a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(U(A,A,A,A,A,A,C(U)),A,A,C(U))><L,U(U(U,U,U,U,A,A,A,A,A,C(U),A,A,A,A),U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dFractional :: GHC.Real.Fractional a)
                      ($dSIMD8Float :: Data.SIMD.SIMD8.SIMD8Float a).
                  @ (Data.SIMD.SIMD8.X8 a)
                  (Data.SIMD.SIMD8.$fFractionalX8_$cp1Fractional
                     @ a
                     $dFractional
                     $dSIMD8Float)
                  (Data.SIMD.SIMD8.divideX8 @ a $dSIMD8Float)
                  (Data.SIMD.SIMD8.$fFractionalX8_$crecip
                     @ a
                     $dFractional
                     $dSIMD8Float)
                  (Data.SIMD.SIMD8.$fFractionalX8_$cfromRational
                     @ a
                     $dFractional
                     $dSIMD8Float) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fFractionalX8_$cfromRational ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD8.SIMD8Float a) =>
    GHC.Real.Rational -> Data.SIMD.SIMD8.X8 a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(U))><S(S(LLLLLLLLLC(S)LLLL)L),1*U(1*U(A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A),A)><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dSIMD8Float :: Data.SIMD.SIMD8.SIMD8Float a)
                   (eta :: GHC.Real.Rational) ->
                 Data.SIMD.SIMD8.broadcastX8
                   @ a
                   (Data.SIMD.SIMD8.$p1SIMD8Float @ a $dSIMD8Float)
                   (GHC.Real.fromRational @ a $dFractional eta)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fFractionalX8_$cp1Fractional ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD8.SIMD8Float a) =>
    GHC.Num.Num (Data.SIMD.SIMD8.X8 a)
  {- Arity: 2,
     Strictness: <L,1*U(1*U(A,A,A,A,A,A,C(U)),A,A,A)><L,1*U(1*U(1*U,1*U,1*U,1*U,A,A,A,A,A,C(U),A,A,A,A),A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dSIMD8Float :: Data.SIMD.SIMD8.SIMD8Float a) ->
                 Data.SIMD.SIMD8.$fNumX8
                   @ a
                   (GHC.Real.$p1Fractional @ a $dFractional)
                   (Data.SIMD.SIMD8.$p1SIMD8Float @ a $dSIMD8Float)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fFractionalX8_$crecip ::
    (GHC.Real.Fractional a, Data.SIMD.SIMD8.SIMD8Float a) =>
    Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
  {- Arity: 3,
     Strictness: <L,U(U(A,A,A,A,A,A,C(U)),A,A,C(U))><L,U(U(U,U,U,U,A,A,A,A,A,C(U),A,A,A,A),U)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dSIMD8Float :: Data.SIMD.SIMD8.SIMD8Float a)
                   (eta :: Data.SIMD.SIMD8.X8 a) ->
                 Data.SIMD.SIMD8.divideX8
                   @ a
                   $dSIMD8Float
                   (GHC.Num.fromInteger
                      @ (Data.SIMD.SIMD8.X8 a)
                      (Data.SIMD.SIMD8.$fFractionalX8_$cp1Fractional
                         @ a
                         $dFractional
                         $dSIMD8Float)
                      1)
                   eta) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicLength
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicOverlaps
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeNew
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicInitialize
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeRead
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeWrite
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicClear
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicSet
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeMove
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$cbasicUnsafeGrow -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicLength
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicOverlaps
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeNew
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicInitialize
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeRead
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeWrite
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicClear
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicSet
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeMove
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$cbasicUnsafeGrow -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m ()
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0] <s>_N))
                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild2 { Data.SIMD.SIMD8.Word32X8 x# ->
                            case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeWord32ArrayAsWord32X8#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                         (case Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                            v')))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD8.$w$cbasicUnsafeMove1
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (Data.SIMD.SIMD8.$fMVectorMVectorX80_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild2 { Data.SIMD.SIMD8.Word32X8 x# ->
                                  case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeWord32ArrayAsWord32X8#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                         v1))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0] <s>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0] <s>_N)))
                   (Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0] <s>_N)))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild2 { Data.SIMD.SIMD8.Word32X8 x# ->
                    case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeWord32ArrayAsWord32X8#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Word.Word32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord32ArrayAsWord32X8#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX80_$salignment ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case Data.SIMD.SIMD8.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 8#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicLength
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicOverlaps
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeNew
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicInitialize
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeRead
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeWrite
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicClear
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicSet
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeMove
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$cbasicUnsafeGrow -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m ()
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0] <s>_N))
                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild2 { Data.SIMD.SIMD8.Int64X8 x# ->
                            case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeInt64ArrayAsInt64X8#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                         (case Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                            v')))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD8.$w$cbasicUnsafeMove2
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (Data.SIMD.SIMD8.$fMVectorMVectorX81_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild2 { Data.SIMD.SIMD8.Int64X8 x# ->
                                  case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeInt64ArrayAsInt64X8#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                         v1))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0] <s>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0] <s>_N)))
                   (Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0] <s>_N)))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild2 { Data.SIMD.SIMD8.Int64X8 x# ->
                    case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeInt64ArrayAsInt64X8#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Int.Int64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt64ArrayAsInt64X8#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX81_$salignment ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case Data.SIMD.SIMD8.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 8#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicLength
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicOverlaps
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeNew
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicInitialize
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeRead
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeWrite
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicClear
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicSet
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeMove
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$cbasicUnsafeGrow -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m ()
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0] <s>_N))
                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild2 { Data.SIMD.SIMD8.Int32X8 x# ->
                            case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeInt32ArrayAsInt32X8#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                         (case Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                            v')))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD8.$w$cbasicUnsafeMove3
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (Data.SIMD.SIMD8.$fMVectorMVectorX82_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild2 { Data.SIMD.SIMD8.Int32X8 x# ->
                                  case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeInt32ArrayAsInt32X8#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                         v1))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0] <s>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0] <s>_N)))
                   (Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0] <s>_N)))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild2 { Data.SIMD.SIMD8.Int32X8 x# ->
                    case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeInt32ArrayAsInt32X8#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Int.Int32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt32ArrayAsInt32X8#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX82_$salignment ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case Data.SIMD.SIMD8.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 8#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicLength
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicOverlaps
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeNew
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicInitialize
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeRead
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeWrite
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicClear
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicSet
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeMove
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$cbasicUnsafeGrow -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m ()
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0] <s>_N))
                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild2 { Data.SIMD.SIMD8.DoubleX8 x# ->
                            case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeDoubleArrayAsDoubleX8#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                         (case Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                            v')))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD8.$w$cbasicUnsafeMove4
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (Data.SIMD.SIMD8.$fMVectorMVectorX83_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Double)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild2 { Data.SIMD.SIMD8.DoubleX8 x# ->
                                  case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeDoubleArrayAsDoubleX8#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                         v1))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0] <s>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0] <s>_N)))
                   (Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0] <s>_N)))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Types.Double -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild2 { Data.SIMD.SIMD8.DoubleX8 x# ->
                    case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeDoubleArrayAsDoubleX8#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readDoubleArrayAsDoubleX8#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.DoubleX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX83_$salignment ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case Data.SIMD.SIMD8.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 8#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84 ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicLength
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicOverlaps
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeNew
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicInitialize
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeReplicate
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeRead
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeWrite
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicClear
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicSet
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeMove
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$cbasicUnsafeGrow -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m ()
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0] <s>_N))
                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild2 { Data.SIMD.SIMD8.FloatX8 x# ->
                            case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeFloatArrayAsFloatX8#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                         (case Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                            v')))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD8.$w$cbasicUnsafeMove5
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (Data.SIMD.SIMD8.$fMVectorMVectorX84_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Types.Float)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild2 { Data.SIMD.SIMD8.FloatX8 x# ->
                                  case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeFloatArrayAsFloatX8#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                         v1))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0] <s>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0] <s>_N)))
                   (Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0] <s>_N)))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Types.Float -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild2 { Data.SIMD.SIMD8.FloatX8 x# ->
                    case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeFloatArrayAsFloatX8#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Types.Float #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readFloatArrayAsFloatX8#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.FloatX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX84_$salignment ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case Data.SIMD.SIMD8.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 8#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m ()
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 Trans
                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0] <s>_N))
                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0] <s>_N))
                 ->_R <GHC.Types.Int>_R) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <s>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt
                 } in
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <s>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 let {
                   between :: forall a1.
                              GHC.Classes.Ord a1 =>
                              a1 -> a1 -> a1 -> GHC.Types.Bool
                     {- Arity: 4 -}
                   = \ @ a1
                       ($dOrd :: GHC.Classes.Ord a1)
                       (x :: a1)
                       (y :: a1)
                       (z :: a1) ->
                     GHC.Classes.&&
                       (GHC.Classes.>= @ a1 $dOrd x y)
                       (GHC.Classes.< @ a1 $dOrd x z)
                 } in
                 GHC.Classes.&&
                   (GHC.Prim.tagToEnum#
                      @ GHC.Types.Bool
                      (GHC.Prim.sameMutableByteArray# @ s dt2 dt5))
                   (GHC.Classes.||
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         i
                         j
                         (GHC.Num.$fNumInt_$c+ j (GHC.Types.I# dt4)))
                      (between
                         @ GHC.Types.Int
                         GHC.Classes.$fOrdInt
                         j
                         i
                         (GHC.Num.$fNumInt_$c+ i (GHC.Types.I# dt1)))) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> m ()
  {- Arity: 3, Strictness: <S(SL),U(U,U)><S,1*U(U,U,U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 case eta
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                 case Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicLength
                        @ (Control.Monad.Primitive.PrimState m)
                        nt of n { GHC.Types.I# ipv3 ->
                 letrec {
                   do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                   = \ (i :: GHC.Types.Int) ->
                     case GHC.Classes.ltInt
                            (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                            n of wild {
                       GHC.Types.False
                       -> case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     i
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case (GHC.Base.$
                                  @ 'GHC.Types.PtrRepLifted
                                  @ (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                  @ (Data.Vector.Unboxed.Base.MVector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                  (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                   tpl)
                                    `cast`
                                  (<Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                   ->_R Trans
                                            (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                      <Control.Monad.Primitive.PrimState m>_N))
                                            (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                      <Control.Monad.Primitive.PrimState m>_N)))
                                  (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                     @ (Control.Monad.Primitive.PrimState m)
                                     (GHC.Types.I# 0#)
                                     (GHC.Num.$fNumInt_$c- n i)
                                     nt))
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild4 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild5 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild5
                                    dt2
                                    wild4
                                    wild3
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } }
                       GHC.Types.True
                       -> GHC.Base.>>
                            @ m
                            $dMonad
                            @ ()
                            @ ()
                            (case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        i
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                             case (GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                     @ (Data.Vector.Unboxed.Base.MVector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                     (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                      tpl)
                                       `cast`
                                     (<Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                      ->_R Trans
                                               (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))
                                               (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                         <Control.Monad.Primitive.PrimState m>_N)))
                                     (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                        @ (Control.Monad.Primitive.PrimState m)
                                        (GHC.Types.I# 0#)
                                        i
                                        nt))
                                    `cast`
                                  (Trans
                                       (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                            <Control.Monad.Primitive.PrimState m>_N)
                                       (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                             let {
                               sz :: GHC.Types.Int
                               = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                                   (GHC.Err.undefined
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 20#)
                                            (GHC.Types.I# 121#)
                                            (GHC.Types.I# 29#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                             } in
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State#
                                           (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt1)
                                          sz) of wild3 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt)
                                          sz) of wild4 { DEFAULT ->
                                case Data.Primitive.ByteArray.unI#
                                       (GHC.Num.$fNumInt_$c*
                                          (GHC.Types.I# dt3)
                                          sz) of wild5 { DEFAULT ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt5
                                       wild5
                                       dt2
                                       wild4
                                       wild3
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) } } } }) } })
                            (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                 } in
                 case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Base.>>
                        @ m
                        $dMonad
                        @ ()
                        @ ()
                        (case GHC.Num.$fNumInt_$c+
                                (GHC.Types.I# ipv)
                                (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                         Control.Monad.Primitive.primitive
                           @ m
                           $dPrimMonad
                           @ ()
                           (\ (s# :: GHC.Prim.State#
                                       (Control.Monad.Primitive.PrimState m))[OneShot] ->
                            case eta1
                                   `cast`
                                 (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild2 { Data.SIMD.SIMD8.Word64X8 x# ->
                            case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                            case GHC.Prim.writeWord64ArrayAsWord64X8#
                                   @ (Control.Monad.Primitive.PrimState m)
                                   ipv2
                                   wild3
                                   x#
                                   s# of s'# { DEFAULT ->
                            (# s'#, GHC.Tuple.() #) } } }) })
                        (do_set (GHC.Types.I# 1#))
                   GHC.Types.True
                   -> GHC.Base.return @ m $dMonad @ () GHC.Tuple.() } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   sz :: GHC.Types.Int
                   = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                       (GHC.Err.undefined
                          @ 'GHC.Types.PtrRepLifted
                          @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                          (GHC.Stack.Types.PushCallStack
                             (GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                             (GHC.Stack.Types.SrcLoc
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Data.Vector.Primitive.Mutable"#))
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 20#)
                                (GHC.Types.I# 121#)
                                (GHC.Types.I# 29#))
                             GHC.Stack.Types.EmptyCallStack)
                            `cast`
                          (Sym (GHC.Classes.N:IP[0]
                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                 } in
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt1) sz) of wild2 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt) sz) of wild3 { DEFAULT ->
                    case Data.Primitive.ByteArray.unI#
                           (GHC.Num.$fNumInt_$c* (GHC.Types.I# dt3) sz) of wild4 { DEFAULT ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           wild4
                           dt2
                           wild3
                           wild2
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
  {- Arity: 3, Strictness: <S(SL),U(U,C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (eta1 :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    let {
                      n :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicLength
                          @ (Control.Monad.Primitive.PrimState m)
                          eta
                            `cast`
                          (Trans
                               (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                    <Control.Monad.Primitive.PrimState m>_N)
                               (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                    <Control.Monad.Primitive.PrimState m>_N))
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      (let {
                         n1 :: GHC.Types.Int = GHC.Num.$fNumInt_$c+ n eta1
                       } in
                       let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n1
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                      (GHC.Types.I# 0#)
                                      n1)
                                   (case GHC.Num.$fNumInt_$c* n1 size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n2 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n2)
                                      (GHC.Show.$fShowInt_$cshow n1)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n2 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n2)
                                 (GHC.Show.$fShowInt_$cshow n1)) })
                      (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                       GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                         (case Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                 @ (Control.Monad.Primitive.PrimState m)
                                 (GHC.Types.I# 0#)
                                 n
                                 v' of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                          case eta
                                 `cast`
                               (Trans
                                    (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                         <Control.Monad.Primitive.PrimState m>_N)
                                    (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                         <Control.Monad.Primitive.PrimState
                                            m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                          let {
                            sz :: GHC.Types.Int
                            = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                                (GHC.Err.undefined
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 20#)
                                         (GHC.Types.I# 121#)
                                         (GHC.Types.I# 29#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                          } in
                          Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ ()
                            (\ (s# :: GHC.Prim.State#
                                        (Control.Monad.Primitive.PrimState m))[OneShot] ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt1)
                                       sz) of wild2 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt)
                                       sz) of wild3 { DEFAULT ->
                             case Data.Primitive.ByteArray.unI#
                                    (GHC.Num.$fNumInt_$c*
                                       (GHC.Types.I# dt3)
                                       sz) of wild4 { DEFAULT ->
                             case GHC.Prim.copyMutableByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt5
                                    wild4
                                    dt2
                                    wild3
                                    wild2
                                    s# of s'# { DEFAULT ->
                             (# s'#, GHC.Tuple.() #) } } } }) } })
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                            v')))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (w1 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (w2 :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case w1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww { Data.Vector.Primitive.Mutable.MVector ww1 ww2 ww3 ->
                 case w2
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of ww4 { Data.Vector.Primitive.Mutable.MVector ww5 ww6 ww7 ->
                 Data.SIMD.SIMD8.$w$cbasicUnsafeMove
                   @ m
                   w
                   ww1
                   ww2
                   ww3
                   ww5
                   ww7 } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
  {- Arity: 2, Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (let {
                      size :: GHC.Types.Int
                      = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                          (GHC.Err.undefined
                             @ 'GHC.Types.PtrRepLifted
                             @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                             (GHC.Stack.Types.PushCallStack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                (GHC.Stack.Types.SrcLoc
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Data.Vector.Primitive.Mutable"#))
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 22#)
                                   (GHC.Types.I# 101#)
                                   (GHC.Types.I# 31#))
                                GHC.Stack.Types.EmptyCallStack)
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                    } in
                    case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                      GHC.Types.False
                      -> case GHC.Classes.gtInt
                                eta
                                (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                           GHC.Types.False
                           -> GHC.Base.liftM
                                @ m
                                @ (Data.Primitive.ByteArray.MutableByteArray
                                     (Control.Monad.Primitive.PrimState m))
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                (Data.Vector.Primitive.Mutable.$WMVector
                                   @ (Control.Monad.Primitive.PrimState m)
                                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                   (GHC.Types.I# 0#)
                                   eta)
                                (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                 Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                    case GHC.Prim.newByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           n#
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv,
                                       Data.Primitive.ByteArray.MutableByteArray
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv1 #) }) })
                           GHC.Types.True
                           -> GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ [GHC.Types.Char]
                                @ (m (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                (GHC.Err.error
                                   @ 'GHC.Types.PtrRepLifted
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "Primitive.basicUnsafeNew: length to large: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShowInt_$cshow eta)) }
                      GHC.Types.True
                      -> GHC.Base.$
                           @ 'GHC.Types.PtrRepLifted
                           @ [GHC.Types.Char]
                           @ (m (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                           (GHC.Err.error
                              @ 'GHC.Types.PtrRepLifted
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n1 :: b)[OneShot] ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "Primitive.basicUnsafeNew: negative length: "#
                                 c
                                 n1)
                              (GHC.Show.$fShowInt_$cshow eta)) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (Data.SIMD.SIMD8.$fMVectorMVectorX8_$creadByteArray#
                      @ (Control.Monad.Primitive.PrimState m)
                      dt2
                      i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
  {- Arity: 3, Strictness: <S(SL),U(U,U)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: GHC.Types.Int)
                   (eta1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (GHC.Base.liftM
                      @ m
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                       tpl)
                        `cast`
                      (<Data.Vector.Primitive.Mutable.MVector
                          (Control.Monad.Primitive.PrimState m)
                          (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                       ->_R Trans
                                (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                          <Control.Monad.Primitive.PrimState m>_N))
                                (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                          <Control.Monad.Primitive.PrimState m>_N)))
                      (let {
                         size :: GHC.Types.Int
                         = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                             (GHC.Err.undefined
                                @ 'GHC.Types.PtrRepLifted
                                @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                (GHC.Stack.Types.PushCallStack
                                   (GHC.Base.build
                                      @ GHC.Types.Char
                                      (\ @ b -> GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                   (GHC.Stack.Types.SrcLoc
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Data.Vector.Primitive.Mutable"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "./Data/Vector/Primitive/Mutable.hs"#))
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 22#)
                                      (GHC.Types.I# 101#)
                                      (GHC.Types.I# 31#))
                                   GHC.Stack.Types.EmptyCallStack)
                                  `cast`
                                (Sym (GHC.Classes.N:IP[0]
                                          <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                       } in
                       case GHC.Classes.ltInt eta (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   eta
                                   (GHC.Real.$fIntegralInt_$cdiv GHC.Base.maxInt size) of wild1 {
                              GHC.Types.False
                              -> GHC.Base.liftM
                                   @ m
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                                   (Data.Vector.Primitive.Mutable.$WMVector
                                      @ (Control.Monad.Primitive.PrimState m)
                                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                      (GHC.Types.I# 0#)
                                      eta)
                                   (case GHC.Num.$fNumInt_$c* eta size of wild2 { GHC.Types.I# n# ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              n#
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                              GHC.Types.True
                              -> GHC.Base.$
                                   @ 'GHC.Types.PtrRepLifted
                                   @ [GHC.Types.Char]
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m)
                                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                   (GHC.Err.error
                                      @ 'GHC.Types.PtrRepLifted
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m)
                                              (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.$fShowInt_$cshow eta)) }
                         GHC.Types.True
                         -> GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ [GHC.Types.Char]
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                              (GHC.Err.error
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.$fShowInt_$cshow eta)) }))
                   (\ (v1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case v1
                              `cast`
                            (Trans
                                 (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                      <Control.Monad.Primitive.PrimState m>_N)
                                 (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                      <Control.Monad.Primitive.PrimState
                                         m>_N)) of nt { Data.Vector.Primitive.Mutable.MVector ipv ipv1 ipv2 ->
                       case Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicLength
                              @ (Control.Monad.Primitive.PrimState m)
                              nt of n { GHC.Types.I# ipv3 ->
                       letrec {
                         do_set :: GHC.Types.Int -> m () {- Arity: 1 -}
                         = \ (i :: GHC.Types.Int) ->
                           case GHC.Classes.ltInt
                                  (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)
                                  n of wild {
                             GHC.Types.False
                             -> case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           i
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                case (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                        @ (Data.Vector.Unboxed.Base.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                        (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                         tpl)
                                          `cast`
                                        (<Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                         ->_R Trans
                                                  (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N))
                                                  (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                            <Control.Monad.Primitive.PrimState
                                                               m>_N)))
                                        (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                           @ (Control.Monad.Primitive.PrimState m)
                                           (GHC.Types.I# 0#)
                                           (GHC.Num.$fNumInt_$c- n i)
                                           nt))
                                       `cast`
                                     (Trans
                                          (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                               <Control.Monad.Primitive.PrimState m>_N)
                                          (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                let {
                                  sz :: GHC.Types.Int
                                  = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                                      (GHC.Err.undefined
                                         @ 'GHC.Types.PtrRepLifted
                                         @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                         (GHC.Stack.Types.PushCallStack
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                            (GHC.Stack.Types.SrcLoc
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "Data.Vector.Primitive.Mutable"#))
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "./Data/Vector/Primitive/Mutable.hs"#))
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 20#)
                                               (GHC.Types.I# 121#)
                                               (GHC.Types.I# 29#))
                                            GHC.Stack.Types.EmptyCallStack)
                                           `cast`
                                         (Sym (GHC.Classes.N:IP[0]
                                                   <"callStack">_N <GHC.Stack.Types.CallStack>_N)))
                                } in
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s# :: GHC.Prim.State#
                                              (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt1)
                                             sz) of wild3 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt)
                                             sz) of wild4 { DEFAULT ->
                                   case Data.Primitive.ByteArray.unI#
                                          (GHC.Num.$fNumInt_$c*
                                             (GHC.Types.I# dt3)
                                             sz) of wild5 { DEFAULT ->
                                   case GHC.Prim.copyMutableByteArray#
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt5
                                          wild5
                                          dt2
                                          wild4
                                          wild3
                                          s# of s'# { DEFAULT ->
                                   (# s'#, GHC.Tuple.() #) } } } }) } }
                             GHC.Types.True
                             -> GHC.Base.>>
                                  @ m
                                  $dMonad1
                                  @ ()
                                  @ ()
                                  (case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              i
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild1 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                   case (GHC.Base.$
                                           @ 'GHC.Types.PtrRepLifted
                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                           @ (Data.Vector.Unboxed.Base.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                                           (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                                            tpl)
                                             `cast`
                                           (<Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                                            ->_R Trans
                                                     (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))
                                                     (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N)))
                                           (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Types.I# 0#)
                                              i
                                              nt))
                                          `cast`
                                        (Trans
                                             (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                                  <Control.Monad.Primitive.PrimState m>_N)
                                             (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                                  <Control.Monad.Primitive.PrimState
                                                     m>_N)) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                                   let {
                                     sz :: GHC.Types.Int
                                     = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                                         (GHC.Err.undefined
                                            @ 'GHC.Types.PtrRepLifted
                                            @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b
                                                     "undefined"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Primitive.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Primitive/Mutable.hs"#))
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 20#)
                                                  (GHC.Types.I# 121#)
                                                  (GHC.Types.I# 29#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N)))
                                   } in
                                   Control.Monad.Primitive.primitive
                                     @ m
                                     $dPrimMonad
                                     @ ()
                                     (\ (s# :: GHC.Prim.State#
                                                 (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt1)
                                                sz) of wild3 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt)
                                                sz) of wild4 { DEFAULT ->
                                      case Data.Primitive.ByteArray.unI#
                                             (GHC.Num.$fNumInt_$c*
                                                (GHC.Types.I# dt3)
                                                sz) of wild5 { DEFAULT ->
                                      case GHC.Prim.copyMutableByteArray#
                                             @ (Control.Monad.Primitive.PrimState m)
                                             dt5
                                             wild5
                                             dt2
                                             wild4
                                             wild3
                                             s# of s'# { DEFAULT ->
                                      (# s'#, GHC.Tuple.() #) } } } }) } })
                                  (do_set (GHC.Num.$fNumInt_$c* (GHC.Types.I# 2#) i)) }
                       } in
                       case GHC.Classes.eqInt n (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> GHC.Base.>>
                              @ m
                              $dMonad1
                              @ ()
                              @ ()
                              (case GHC.Num.$fNumInt_$c+
                                      (GHC.Types.I# ipv)
                                      (GHC.Types.I# 0#) of wild1 { GHC.Types.I# i# ->
                               Control.Monad.Primitive.primitive
                                 @ m
                                 $dPrimMonad
                                 @ ()
                                 (\ (s# :: GHC.Prim.State#
                                             (Control.Monad.Primitive.PrimState m))[OneShot] ->
                                  case eta1
                                         `cast`
                                       (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild2 { Data.SIMD.SIMD8.Word64X8 x# ->
                                  case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                                  case GHC.Prim.writeWord64ArrayAsWord64X8#
                                         @ (Control.Monad.Primitive.PrimState m)
                                         ipv2
                                         wild3
                                         x#
                                         s# of s'# { DEFAULT ->
                                  (# s'#, GHC.Tuple.() #) } } }) })
                              (do_set (GHC.Types.I# 1#))
                         GHC.Types.True
                         -> GHC.Base.return @ m $dMonad1 @ () GHC.Tuple.() } } })
                      (GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                         v1))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Mutable.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        s (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0] <s>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0] <s>_N)))
                   (Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
                      @ s
                      i
                      n
                      ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0] <s>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0] <s>_N)))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (i :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                <Control.Monad.Primitive.PrimState m>_N)
                           (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                <Control.Monad.Primitive.PrimState
                                   m>_N)) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case x `cast`
                         (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild2 { Data.SIMD.SIMD8.Word64X8 x# ->
                    case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                    case GHC.Prim.writeWord64ArrayAsWord64X8#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt2
                           wild3
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } } }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$creadByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Word.Word64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord64ArrayAsWord64X8#
                        @ s
                        arr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicLength ::
    Data.Vector.Primitive.Mutable.MVector
      s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ s
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Primitive.Mutable.MVector
         s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   (j :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (ds :: Data.Vector.Primitive.Mutable.MVector
                            s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case ds of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case j of wild1 { GHC.Types.I# y ->
                 case m of dt3 { GHC.Types.I# dt4 ->
                 Data.Vector.Primitive.Mutable.MVector
                   @ s
                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (GHC.Prim.+# dt y)
                   dt4
                   dt2 } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fMVectorMVectorX8_$salignment ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case Data.SIMD.SIMD8.unI#
                        (GHC.Num.$fNumInt_$c*
                           Data.Primitive.MachDeps.aLIGNMENT_FLOAT
                           (GHC.Types.I# 8#)) of wild { DEFAULT ->
                 GHC.Types.I# wild }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fNumX8 ::
    (GHC.Num.Num a, Data.SIMD.SIMD8.SIMD8 a) =>
    GHC.Num.Num (Data.SIMD.SIMD8.X8 a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><L,U(1*U,1*U,1*U,1*U,A,A,A,A,A,C(U),A,A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dNum :: GHC.Num.Num a)
                      ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a).
                  @ (Data.SIMD.SIMD8.X8 a)
                  (Data.SIMD.SIMD8.plusX8 @ a $dSIMD8)
                  (Data.SIMD.SIMD8.minusX8 @ a $dSIMD8)
                  (Data.SIMD.SIMD8.timesX8 @ a $dSIMD8)
                  (Data.SIMD.SIMD8.negateX8 @ a $dSIMD8)
                  (Data.SIMD.SIMD8.$fNumX8_$cabs @ a $dNum $dSIMD8)
                  (Data.SIMD.SIMD8.$fNumX8_$csignum @ a $dNum $dSIMD8)
                  (Data.SIMD.SIMD8.$fNumX8_$cfromInteger @ a $dNum $dSIMD8) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fNumX8_$cabs ::
    (GHC.Num.Num a, Data.SIMD.SIMD8.SIMD8 a) =>
    Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
  {- Arity: 2, Strictness: <B,A><B,A>x, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a) ->
                 GHC.Err.error
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a)
                   (GHC.Stack.Types.PushCallStack
                      (GHC.Base.build
                         @ GHC.Types.Char
                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                      (GHC.Stack.Types.SrcLoc
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD8"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD8.hs"#))
                         (GHC.Types.I# 108#)
                         (GHC.Types.I# 11#)
                         (GHC.Types.I# 108#)
                         (GHC.Types.I# 40#))
                      GHC.Stack.Types.EmptyCallStack)
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b ->
                       GHC.CString.unpackFoldrCString# @ b "SIMD8 abs not defined"#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fNumX8_$cfromInteger ::
    (GHC.Num.Num a, Data.SIMD.SIMD8.SIMD8 a) =>
    GHC.Integer.Type.Integer -> Data.SIMD.SIMD8.X8 a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><S(LLLLLLLLLC(S)LLLL),1*U(A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   (i :: GHC.Integer.Type.Integer) ->
                 Data.SIMD.SIMD8.broadcastX8
                   @ a
                   $dSIMD8
                   (GHC.Num.fromInteger @ a $dNum i)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fNumX8_$csignum ::
    (GHC.Num.Num a, Data.SIMD.SIMD8.SIMD8 a) =>
    Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
  {- Arity: 2, Strictness: <B,A><B,A>x, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a) ->
                 GHC.Err.error
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a)
                   (GHC.Stack.Types.PushCallStack
                      (GHC.Base.build
                         @ GHC.Types.Char
                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                      (GHC.Stack.Types.SrcLoc
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD8"#))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b ->
                             GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD8.hs"#))
                         (GHC.Types.I# 109#)
                         (GHC.Types.I# 14#)
                         (GHC.Types.I# 109#)
                         (GHC.Types.I# 46#))
                      GHC.Stack.Types.EmptyCallStack)
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b ->
                       GHC.CString.unpackFoldrCString#
                         @ b
                         "SIMD8 signum not defined"#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                  Data.SIMD.SIMD8.$fPrimX8_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX8_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX8_$cindexByteArray#
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$creadByteArray#
                  Data.SIMD.SIMD8.$fPrimX8_$cwriteByteArray#
                  Data.SIMD.SIMD8.$fPrimX8_$csetByteArray#
                  Data.SIMD.SIMD8.$fPrimX8_$cindexOffAddr#
                  Data.SIMD.SIMD8.$fPrimX8_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX8_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fPrimX8_$csetOffAddr# -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                  Data.SIMD.SIMD8.$fPrimX80_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX80_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX80_$cindexByteArray#
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$creadByteArray#
                  Data.SIMD.SIMD8.$fPrimX80_$cwriteByteArray#
                  Data.SIMD.SIMD8.$fPrimX80_$csetByteArray#
                  Data.SIMD.SIMD8.$fPrimX80_$cindexOffAddr#
                  Data.SIMD.SIMD8.$fPrimX80_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX80_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fPrimX80_$csetOffAddr# -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord32ArrayAsWord32X8#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word32X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord32OffAddrAsWord32X8#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word32X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Word.Word32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord32OffAddrAsWord32X8#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$csizeOf# ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 Data.SIMD.SIMD8.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 8#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord32ArrayAsWord32X8# @ s arr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX80_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord32OffAddrAsWord32X8#
                   @ s
                   addr#
                   wild1
                   x#
                   s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                  Data.SIMD.SIMD8.$fPrimX81_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX81_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX81_$cindexByteArray#
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$creadByteArray#
                  Data.SIMD.SIMD8.$fPrimX81_$cwriteByteArray#
                  Data.SIMD.SIMD8.$fPrimX81_$csetByteArray#
                  Data.SIMD.SIMD8.$fPrimX81_$cindexOffAddr#
                  Data.SIMD.SIMD8.$fPrimX81_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX81_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fPrimX81_$csetOffAddr# -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt64ArrayAsInt64X8#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int64X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$cindexOffAddr# ::
    GHC.Prim.Addr# -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt64OffAddrAsInt64X8#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int64X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Int.Int64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt64OffAddrAsInt64X8#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$csizeOf# ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 Data.SIMD.SIMD8.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 8#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt64ArrayAsInt64X8# @ s arr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX81_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt64OffAddrAsInt64X8# @ s addr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                  Data.SIMD.SIMD8.$fPrimX82_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX82_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX82_$cindexByteArray#
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$creadByteArray#
                  Data.SIMD.SIMD8.$fPrimX82_$cwriteByteArray#
                  Data.SIMD.SIMD8.$fPrimX82_$csetByteArray#
                  Data.SIMD.SIMD8.$fPrimX82_$cindexOffAddr#
                  Data.SIMD.SIMD8.$fPrimX82_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX82_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fPrimX82_$csetOffAddr# -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt32ArrayAsInt32X8#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int32X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$cindexOffAddr# ::
    GHC.Prim.Addr# -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexInt32OffAddrAsInt32X8#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int32X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Int.Int32 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readInt32OffAddrAsInt32X8#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$csizeOf# ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 Data.SIMD.SIMD8.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 8#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt32ArrayAsInt32X8# @ s arr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX82_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeInt32OffAddrAsInt32X8# @ s addr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                  Data.SIMD.SIMD8.$fPrimX83_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX83_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX83_$cindexByteArray#
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$creadByteArray#
                  Data.SIMD.SIMD8.$fPrimX83_$cwriteByteArray#
                  Data.SIMD.SIMD8.$fPrimX83_$csetByteArray#
                  Data.SIMD.SIMD8.$fPrimX83_$cindexOffAddr#
                  Data.SIMD.SIMD8.$fPrimX83_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX83_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fPrimX83_$csetOffAddr# -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexDoubleArrayAsDoubleX8#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.DoubleX8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexDoubleOffAddrAsDoubleX8#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.DoubleX8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readDoubleOffAddrAsDoubleX8#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.DoubleX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$csizeOf# ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 Data.SIMD.SIMD8.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 8#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeDoubleArrayAsDoubleX8# @ s arr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX83_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeDoubleOffAddrAsDoubleX8#
                   @ s
                   addr#
                   wild1
                   x#
                   s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84 ::
    Data.Primitive.Types.Prim (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                  Data.SIMD.SIMD8.$fPrimX84_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX84_$csizeOf#
                  Data.SIMD.SIMD8.$fPrimX84_$cindexByteArray#
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$creadByteArray#
                  Data.SIMD.SIMD8.$fPrimX84_$cwriteByteArray#
                  Data.SIMD.SIMD8.$fPrimX84_$csetByteArray#
                  Data.SIMD.SIMD8.$fPrimX84_$cindexOffAddr#
                  Data.SIMD.SIMD8.$fPrimX84_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX84_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fPrimX84_$csetOffAddr# -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexFloatArrayAsFloatX8#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.FloatX8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexFloatOffAddrAsFloatX8#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.FloatX8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Types.Float #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readFloatOffAddrAsFloatX8#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.FloatX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$csizeOf# ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 Data.SIMD.SIMD8.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 8#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeFloatArrayAsFloatX8# @ s arr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX84_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeFloatOffAddrAsFloatX8# @ s addr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$cindexByteArray# ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (arr# :: GHC.Prim.ByteArray#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord64ArrayAsWord64X8#
                        arr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word64X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$cindexOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int# -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (addr# :: GHC.Prim.Addr#) (i# :: GHC.Prim.Int#) ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.indexWord64OffAddrAsWord64X8#
                        addr#
                        wild of wild1 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word64X8 wild1)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$creadOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 GHC.Word.Word64 #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case Data.SIMD.SIMD8.mul8 i# of wild { DEFAULT ->
                 case GHC.Prim.readWord64OffAddrAsWord64X8#
                        @ s
                        addr#
                        wild
                        s# of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$csetByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$csetOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Strictness: x -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$csizeOf# ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 Data.SIMD.SIMD8.unI#
                   (GHC.Num.$fNumInt_$c*
                      Data.Primitive.MachDeps.sIZEOF_FLOAT
                      (GHC.Types.I# 8#))) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$cwriteByteArray# ::
    GHC.Prim.MutableByteArray# s
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (arr# :: GHC.Prim.MutableByteArray# s)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord64ArrayAsWord64X8# @ s arr# wild1 x# s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fPrimX8_$cwriteOffAddr# ::
    GHC.Prim.Addr#
    -> GHC.Prim.Int#
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Prim.State# s
    -> GHC.Prim.State# s
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><S,U><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ s
                   (addr# :: GHC.Prim.Addr#)
                   (i# :: GHC.Prim.Int#)
                   (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (s# :: GHC.Prim.State# s)[OneShot] ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 x# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild1 { DEFAULT ->
                 GHC.Prim.writeWord64OffAddrAsWord64X8#
                   @ s
                   addr#
                   wild1
                   x#
                   s# } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double :: Data.SIMD.SIMD8.SIMD8 GHC.Types.Double
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.SIMD.SIMD8.$fSIMD8Double_$cplusX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cminusX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$ctimesX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cnegateX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cindexArrayAsX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cindexOffAddrAsX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cinsertX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cunpackX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cpackX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$cbroadcastX8
                  Data.SIMD.SIMD8.$fPrimX83_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX83_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fSIMD8Double_$cplusHorizontalX8
                  Data.SIMD.SIMD8.$fSIMD8Double_$ctimesHorizontalX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cbroadcastX8 ::
    GHC.Types.Double -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Types.Double) ->
                 case ds of wild { GHC.Types.D# r ->
                 (Data.SIMD.SIMD8.DoubleX8 (GHC.Prim.broadcastDoubleX8# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cindexArrayAsX8 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexDoubleArrayAsDoubleX8#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.DoubleX8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cindexOffAddrAsX8 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexDoubleOffAddrAsDoubleX8#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.DoubleX8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cinsertX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Types.Double
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (ds1 :: GHC.Types.Double)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case ds1 of wild1 { GHC.Types.D# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertDoubleX8# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD8.DoubleX8 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cminusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild1 { Data.SIMD.SIMD8.DoubleX8 v2# ->
                 (Data.SIMD.SIMD8.DoubleX8 (GHC.Prim.minusDoubleX8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cnegateX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 (Data.SIMD.SIMD8.DoubleX8 (GHC.Prim.negateDoubleX8# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cpackX8 ::
    (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
       GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
       GHC.Types.Double, GHC.Types.Double #)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
                             GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
                             GHC.Types.Double, GHC.Types.Double #)) ->
                 case ds of wild { (#,,,,,,,#) ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds1 of wild1 { GHC.Types.D# r1 ->
                 case ds2 of wild2 { GHC.Types.D# r2 ->
                 case ds3 of wild3 { GHC.Types.D# r3 ->
                 case ds4 of wild4 { GHC.Types.D# r4 ->
                 case ds5 of wild5 { GHC.Types.D# r5 ->
                 case ds6 of wild6 { GHC.Types.D# r6 ->
                 case ds7 of wild7 { GHC.Types.D# r7 ->
                 case ds8 of wild8 { GHC.Types.D# r8 ->
                 (Data.SIMD.SIMD8.DoubleX8
                    (GHC.Prim.packDoubleX8# (# r1, r2, r3, r4, r5, r6, r7, r8 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } } } } } } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Types.Double,
     GHC.Num.Num GHC.Types.Double) =>
    Data.SIMD.SIMD8.X8 GHC.Types.Double -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Types.Double)
                   ($dNum :: GHC.Num.Num GHC.Types.Double)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Types.Double
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ GHC.Types.Double
                   $dNum
                   (GHC.Num.+
                      @ GHC.Types.Double
                      $dNum
                      (GHC.Num.+
                         @ GHC.Types.Double
                         $dNum
                         (GHC.Num.+
                            @ GHC.Types.Double
                            $dNum
                            (GHC.Num.+
                               @ GHC.Types.Double
                               $dNum
                               (GHC.Num.+
                                  @ GHC.Types.Double
                                  $dNum
                                  (GHC.Num.+ @ GHC.Types.Double $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cplusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild1 { Data.SIMD.SIMD8.DoubleX8 v2# ->
                 (Data.SIMD.SIMD8.DoubleX8 (GHC.Prim.plusDoubleX8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$ctimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Types.Double,
     GHC.Num.Num GHC.Types.Double) =>
    Data.SIMD.SIMD8.X8 GHC.Types.Double -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Types.Double)
                   ($dNum :: GHC.Num.Num GHC.Types.Double)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Types.Double
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ GHC.Types.Double
                   $dNum
                   (GHC.Num.*
                      @ GHC.Types.Double
                      $dNum
                      (GHC.Num.*
                         @ GHC.Types.Double
                         $dNum
                         (GHC.Num.*
                            @ GHC.Types.Double
                            $dNum
                            (GHC.Num.*
                               @ GHC.Types.Double
                               $dNum
                               (GHC.Num.*
                                  @ GHC.Types.Double
                                  $dNum
                                  (GHC.Num.* @ GHC.Types.Double $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$ctimesX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild1 { Data.SIMD.SIMD8.DoubleX8 v2# ->
                 (Data.SIMD.SIMD8.DoubleX8 (GHC.Prim.timesDoubleX8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Double_$cunpackX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> (# GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
          GHC.Types.Double, GHC.Types.Double, GHC.Types.Double,
          GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case GHC.Prim.unpackDoubleX8#
                        v1# of wild1 { (#,,,,,,,#) r1 r2 r3 r4 r5 r6 r7 r8 ->
                 (# GHC.Types.D# r1, GHC.Types.D# r2, GHC.Types.D# r3,
                    GHC.Types.D# r4, GHC.Types.D# r5, GHC.Types.D# r6, GHC.Types.D# r7,
                    GHC.Types.D# r8 #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float :: Data.SIMD.SIMD8.SIMD8 GHC.Types.Float
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.SIMD.SIMD8.$fSIMD8Float_$cplusX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cminusX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$ctimesX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cnegateX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cindexArrayAsX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cindexOffAddrAsX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cinsertX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cunpackX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cpackX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$cbroadcastX8
                  Data.SIMD.SIMD8.$fPrimX84_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX84_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fSIMD8Float_$cplusHorizontalX8
                  Data.SIMD.SIMD8.$fSIMD8Float_$ctimesHorizontalX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8FloatDouble :: Data.SIMD.SIMD8.SIMD8Float GHC.Types.Double
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.SIMD.SIMD8.$fSIMD8Double
                  Data.SIMD.SIMD8.$fSIMD8FloatDouble_$cdivideX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8FloatDouble_$cdivideX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild1 { Data.SIMD.SIMD8.DoubleX8 v2# ->
                 case GHC.Prim.divideDoubleX8# v1# v2# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.DoubleX8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8FloatFloat :: Data.SIMD.SIMD8.SIMD8Float GHC.Types.Float
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.SIMD.SIMD8.$fSIMD8Float
                  Data.SIMD.SIMD8.$fSIMD8FloatFloat_$cdivideX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8FloatFloat_$cdivideX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild1 { Data.SIMD.SIMD8.FloatX8 v2# ->
                 case GHC.Prim.divideFloatX8# v1# v2# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.FloatX8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cbroadcastX8 ::
    GHC.Types.Float -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Types.Float) ->
                 case ds of wild { GHC.Types.F# r ->
                 (Data.SIMD.SIMD8.FloatX8 (GHC.Prim.broadcastFloatX8# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cindexArrayAsX8 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexFloatArrayAsFloatX8#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.FloatX8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cindexOffAddrAsX8 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexFloatOffAddrAsFloatX8#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.FloatX8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cinsertX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (ds1 :: GHC.Types.Float)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case ds1 of wild1 { GHC.Types.F# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertFloatX8# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD8.FloatX8 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cminusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild1 { Data.SIMD.SIMD8.FloatX8 v2# ->
                 (Data.SIMD.SIMD8.FloatX8 (GHC.Prim.minusFloatX8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cnegateX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 (Data.SIMD.SIMD8.FloatX8 (GHC.Prim.negateFloatX8# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cpackX8 ::
    (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
       GHC.Types.Float, GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
       GHC.Types.Float #)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                             GHC.Types.Float, GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
                             GHC.Types.Float #)) ->
                 case ds of wild { (#,,,,,,,#) ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds1 of wild1 { GHC.Types.F# r1 ->
                 case ds2 of wild2 { GHC.Types.F# r2 ->
                 case ds3 of wild3 { GHC.Types.F# r3 ->
                 case ds4 of wild4 { GHC.Types.F# r4 ->
                 case ds5 of wild5 { GHC.Types.F# r5 ->
                 case ds6 of wild6 { GHC.Types.F# r6 ->
                 case ds7 of wild7 { GHC.Types.F# r7 ->
                 case ds8 of wild8 { GHC.Types.F# r8 ->
                 (Data.SIMD.SIMD8.FloatX8
                    (GHC.Prim.packFloatX8# (# r1, r2, r3, r4, r5, r6, r7, r8 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } } } } } } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Types.Float,
     GHC.Num.Num GHC.Types.Float) =>
    Data.SIMD.SIMD8.X8 GHC.Types.Float -> GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Types.Float)
                   ($dNum :: GHC.Num.Num GHC.Types.Float)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Types.Float
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ GHC.Types.Float
                   $dNum
                   (GHC.Num.+
                      @ GHC.Types.Float
                      $dNum
                      (GHC.Num.+
                         @ GHC.Types.Float
                         $dNum
                         (GHC.Num.+
                            @ GHC.Types.Float
                            $dNum
                            (GHC.Num.+
                               @ GHC.Types.Float
                               $dNum
                               (GHC.Num.+
                                  @ GHC.Types.Float
                                  $dNum
                                  (GHC.Num.+ @ GHC.Types.Float $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cplusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild1 { Data.SIMD.SIMD8.FloatX8 v2# ->
                 (Data.SIMD.SIMD8.FloatX8 (GHC.Prim.plusFloatX8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$ctimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Types.Float,
     GHC.Num.Num GHC.Types.Float) =>
    Data.SIMD.SIMD8.X8 GHC.Types.Float -> GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Types.Float)
                   ($dNum :: GHC.Num.Num GHC.Types.Float)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Types.Float
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ GHC.Types.Float
                   $dNum
                   (GHC.Num.*
                      @ GHC.Types.Float
                      $dNum
                      (GHC.Num.*
                         @ GHC.Types.Float
                         $dNum
                         (GHC.Num.*
                            @ GHC.Types.Float
                            $dNum
                            (GHC.Num.*
                               @ GHC.Types.Float
                               $dNum
                               (GHC.Num.*
                                  @ GHC.Types.Float
                                  $dNum
                                  (GHC.Num.* @ GHC.Types.Float $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$ctimesX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild1 { Data.SIMD.SIMD8.FloatX8 v2# ->
                 (Data.SIMD.SIMD8.FloatX8 (GHC.Prim.timesFloatX8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Float_$cunpackX8 ::
    Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> (# GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
          GHC.Types.Float, GHC.Types.Float, GHC.Types.Float, GHC.Types.Float,
          GHC.Types.Float #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case GHC.Prim.unpackFloatX8#
                        v1# of wild1 { (#,,,,,,,#) r1 r2 r3 r4 r5 r6 r7 r8 ->
                 (# GHC.Types.F# r1, GHC.Types.F# r2, GHC.Types.F# r3,
                    GHC.Types.F# r4, GHC.Types.F# r5, GHC.Types.F# r6, GHC.Types.F# r7,
                    GHC.Types.F# r8 #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32 :: Data.SIMD.SIMD8.SIMD8 GHC.Int.Int32
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cplusX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cminusX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$ctimesX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cnegateX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cindexArrayAsX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cindexOffAddrAsX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cinsertX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cunpackX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cpackX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cbroadcastX8
                  Data.SIMD.SIMD8.$fPrimX82_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX82_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fSIMD8Int32_$cplusHorizontalX8
                  Data.SIMD.SIMD8.$fSIMD8Int32_$ctimesHorizontalX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cbroadcastX8 ::
    GHC.Int.Int32 -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Int.Int32) ->
                 case ds of wild { GHC.Int.I32# r ->
                 (Data.SIMD.SIMD8.Int32X8 (GHC.Prim.broadcastInt32X8# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cindexArrayAsX8 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt32ArrayAsInt32X8#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int32X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cindexOffAddrAsX8 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt32OffAddrAsInt32X8#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int32X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cinsertX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Int.Int32
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (ds1 :: GHC.Int.Int32)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case ds1 of wild1 { GHC.Int.I32# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertInt32X8# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int32X8 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cminusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild1 { Data.SIMD.SIMD8.Int32X8 v2# ->
                 (Data.SIMD.SIMD8.Int32X8 (GHC.Prim.minusInt32X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cnegateX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 v1# ->
                 (Data.SIMD.SIMD8.Int32X8 (GHC.Prim.negateInt32X8# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cpackX8 ::
    (# GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32,
       GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32 #)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32,
                             GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32,
                             GHC.Int.Int32 #)) ->
                 case ds of wild { (#,,,,,,,#) ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds1 of wild1 { GHC.Int.I32# r1 ->
                 case ds2 of wild2 { GHC.Int.I32# r2 ->
                 case ds3 of wild3 { GHC.Int.I32# r3 ->
                 case ds4 of wild4 { GHC.Int.I32# r4 ->
                 case ds5 of wild5 { GHC.Int.I32# r5 ->
                 case ds6 of wild6 { GHC.Int.I32# r6 ->
                 case ds7 of wild7 { GHC.Int.I32# r7 ->
                 case ds8 of wild8 { GHC.Int.I32# r8 ->
                 (Data.SIMD.SIMD8.Int32X8
                    (GHC.Prim.packInt32X8# (# r1, r2, r3, r4, r5, r6, r7, r8 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } } } } } } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Int.Int32, GHC.Num.Num GHC.Int.Int32) =>
    Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Int.Int32)
                   ($dNum :: GHC.Num.Num GHC.Int.Int32)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Int.Int32
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ GHC.Int.Int32
                   $dNum
                   (GHC.Num.+
                      @ GHC.Int.Int32
                      $dNum
                      (GHC.Num.+
                         @ GHC.Int.Int32
                         $dNum
                         (GHC.Num.+
                            @ GHC.Int.Int32
                            $dNum
                            (GHC.Num.+
                               @ GHC.Int.Int32
                               $dNum
                               (GHC.Num.+
                                  @ GHC.Int.Int32
                                  $dNum
                                  (GHC.Num.+ @ GHC.Int.Int32 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cplusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild1 { Data.SIMD.SIMD8.Int32X8 v2# ->
                 (Data.SIMD.SIMD8.Int32X8 (GHC.Prim.plusInt32X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$ctimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Int.Int32, GHC.Num.Num GHC.Int.Int32) =>
    Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Int.Int32)
                   ($dNum :: GHC.Num.Num GHC.Int.Int32)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Int.Int32
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ GHC.Int.Int32
                   $dNum
                   (GHC.Num.*
                      @ GHC.Int.Int32
                      $dNum
                      (GHC.Num.*
                         @ GHC.Int.Int32
                         $dNum
                         (GHC.Num.*
                            @ GHC.Int.Int32
                            $dNum
                            (GHC.Num.*
                               @ GHC.Int.Int32
                               $dNum
                               (GHC.Num.*
                                  @ GHC.Int.Int32
                                  $dNum
                                  (GHC.Num.* @ GHC.Int.Int32 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$ctimesX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild1 { Data.SIMD.SIMD8.Int32X8 v2# ->
                 (Data.SIMD.SIMD8.Int32X8 (GHC.Prim.timesInt32X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int32_$cunpackX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> (# GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32,
          GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32, GHC.Int.Int32 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case GHC.Prim.unpackInt32X8#
                        v1# of wild1 { (#,,,,,,,#) r1 r2 r3 r4 r5 r6 r7 r8 ->
                 (# GHC.Int.I32# r1, GHC.Int.I32# r2, GHC.Int.I32# r3,
                    GHC.Int.I32# r4, GHC.Int.I32# r5, GHC.Int.I32# r6, GHC.Int.I32# r7,
                    GHC.Int.I32# r8 #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64 :: Data.SIMD.SIMD8.SIMD8 GHC.Int.Int64
  DFunId
  {- HasNoCafRefs, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cplusX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cminusX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$ctimesX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cnegateX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cindexArrayAsX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cindexOffAddrAsX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cinsertX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cunpackX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cpackX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cbroadcastX8
                  Data.SIMD.SIMD8.$fPrimX81_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX81_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fSIMD8Int64_$cplusHorizontalX8
                  Data.SIMD.SIMD8.$fSIMD8Int64_$ctimesHorizontalX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cbroadcastX8 ::
    GHC.Int.Int64 -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Int.Int64) ->
                 case ds of wild { GHC.Int.I64# r ->
                 (Data.SIMD.SIMD8.Int64X8 (GHC.Prim.broadcastInt64X8# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cindexArrayAsX8 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt64ArrayAsInt64X8#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int64X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cindexOffAddrAsX8 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexInt64OffAddrAsInt64X8#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int64X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cinsertX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Int.Int64
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (ds1 :: GHC.Int.Int64)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case ds1 of wild1 { GHC.Int.I64# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertInt64X8# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD8.Int64X8 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cminusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild1 { Data.SIMD.SIMD8.Int64X8 v2# ->
                 (Data.SIMD.SIMD8.Int64X8 (GHC.Prim.minusInt64X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cnegateX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 v1# ->
                 (Data.SIMD.SIMD8.Int64X8 (GHC.Prim.negateInt64X8# v1#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cpackX8 ::
    (# GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64,
       GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64 #)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64,
                             GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64,
                             GHC.Int.Int64 #)) ->
                 case ds of wild { (#,,,,,,,#) ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds1 of wild1 { GHC.Int.I64# r1 ->
                 case ds2 of wild2 { GHC.Int.I64# r2 ->
                 case ds3 of wild3 { GHC.Int.I64# r3 ->
                 case ds4 of wild4 { GHC.Int.I64# r4 ->
                 case ds5 of wild5 { GHC.Int.I64# r5 ->
                 case ds6 of wild6 { GHC.Int.I64# r6 ->
                 case ds7 of wild7 { GHC.Int.I64# r7 ->
                 case ds8 of wild8 { GHC.Int.I64# r8 ->
                 (Data.SIMD.SIMD8.Int64X8
                    (GHC.Prim.packInt64X8# (# r1, r2, r3, r4, r5, r6, r7, r8 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } } } } } } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Int.Int64, GHC.Num.Num GHC.Int.Int64) =>
    Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Int.Int64)
                   ($dNum :: GHC.Num.Num GHC.Int.Int64)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Int.Int64
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ GHC.Int.Int64
                   $dNum
                   (GHC.Num.+
                      @ GHC.Int.Int64
                      $dNum
                      (GHC.Num.+
                         @ GHC.Int.Int64
                         $dNum
                         (GHC.Num.+
                            @ GHC.Int.Int64
                            $dNum
                            (GHC.Num.+
                               @ GHC.Int.Int64
                               $dNum
                               (GHC.Num.+
                                  @ GHC.Int.Int64
                                  $dNum
                                  (GHC.Num.+ @ GHC.Int.Int64 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cplusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild1 { Data.SIMD.SIMD8.Int64X8 v2# ->
                 (Data.SIMD.SIMD8.Int64X8 (GHC.Prim.plusInt64X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$ctimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Int.Int64, GHC.Num.Num GHC.Int.Int64) =>
    Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Int.Int64)
                   ($dNum :: GHC.Num.Num GHC.Int.Int64)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Int.Int64
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ GHC.Int.Int64
                   $dNum
                   (GHC.Num.*
                      @ GHC.Int.Int64
                      $dNum
                      (GHC.Num.*
                         @ GHC.Int.Int64
                         $dNum
                         (GHC.Num.*
                            @ GHC.Int.Int64
                            $dNum
                            (GHC.Num.*
                               @ GHC.Int.Int64
                               $dNum
                               (GHC.Num.*
                                  @ GHC.Int.Int64
                                  $dNum
                                  (GHC.Num.* @ GHC.Int.Int64 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$ctimesX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild1 { Data.SIMD.SIMD8.Int64X8 v2# ->
                 (Data.SIMD.SIMD8.Int64X8 (GHC.Prim.timesInt64X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Int64_$cunpackX8 ::
    Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> (# GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64,
          GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64, GHC.Int.Int64 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case GHC.Prim.unpackInt64X8#
                        v1# of wild1 { (#,,,,,,,#) r1 r2 r3 r4 r5 r6 r7 r8 ->
                 (# GHC.Int.I64# r1, GHC.Int.I64# r2, GHC.Int.I64# r3,
                    GHC.Int.I64# r4, GHC.Int.I64# r5, GHC.Int.I64# r6, GHC.Int.I64# r7,
                    GHC.Int.I64# r8 #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32 :: Data.SIMD.SIMD8.SIMD8 GHC.Word.Word32
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cplusX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cminusX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$ctimesX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cnegateX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cindexArrayAsX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cindexOffAddrAsX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cinsertX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cunpackX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cpackX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cbroadcastX8
                  Data.SIMD.SIMD8.$fPrimX80_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX80_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fSIMD8Word32_$cplusHorizontalX8
                  Data.SIMD.SIMD8.$fSIMD8Word32_$ctimesHorizontalX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cbroadcastX8 ::
    GHC.Word.Word32 -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Word.Word32) ->
                 case ds of wild { GHC.Word.W32# r ->
                 (Data.SIMD.SIMD8.Word32X8 (GHC.Prim.broadcastWord32X8# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cindexArrayAsX8 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord32ArrayAsWord32X8#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word32X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cindexOffAddrAsX8 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord32OffAddrAsWord32X8#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word32X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cinsertX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Word.Word32
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (ds1 :: GHC.Word.Word32)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case ds1 of wild1 { GHC.Word.W32# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertWord32X8# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word32X8 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cminusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild1 { Data.SIMD.SIMD8.Word32X8 v2# ->
                 (Data.SIMD.SIMD8.Word32X8 (GHC.Prim.minusWord32X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cnegateX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 1, Strictness: <B,1*U>b, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD8"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD8.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 170#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 376#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 170#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 412#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case ds of tpl { DEFAULT ->
                 case GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Prim.Word32X8# -> GHC.Prim.Word32X8#)
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString# @ b "cannot negate Word32X8"#))
                 ret_ty (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                 of {} }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cpackX8 ::
    (# GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
       GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
       GHC.Word.Word32 #)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
                             GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
                             GHC.Word.Word32 #)) ->
                 case ds of wild { (#,,,,,,,#) ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds1 of wild1 { GHC.Word.W32# r1 ->
                 case ds2 of wild2 { GHC.Word.W32# r2 ->
                 case ds3 of wild3 { GHC.Word.W32# r3 ->
                 case ds4 of wild4 { GHC.Word.W32# r4 ->
                 case ds5 of wild5 { GHC.Word.W32# r5 ->
                 case ds6 of wild6 { GHC.Word.W32# r6 ->
                 case ds7 of wild7 { GHC.Word.W32# r7 ->
                 case ds8 of wild8 { GHC.Word.W32# r8 ->
                 (Data.SIMD.SIMD8.Word32X8
                    (GHC.Prim.packWord32X8# (# r1, r2, r3, r4, r5, r6, r7, r8 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } } } } } } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Word.Word32,
     GHC.Num.Num GHC.Word.Word32) =>
    Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Word.Word32)
                   ($dNum :: GHC.Num.Num GHC.Word.Word32)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Word.Word32
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ GHC.Word.Word32
                   $dNum
                   (GHC.Num.+
                      @ GHC.Word.Word32
                      $dNum
                      (GHC.Num.+
                         @ GHC.Word.Word32
                         $dNum
                         (GHC.Num.+
                            @ GHC.Word.Word32
                            $dNum
                            (GHC.Num.+
                               @ GHC.Word.Word32
                               $dNum
                               (GHC.Num.+
                                  @ GHC.Word.Word32
                                  $dNum
                                  (GHC.Num.+ @ GHC.Word.Word32 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cplusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild1 { Data.SIMD.SIMD8.Word32X8 v2# ->
                 (Data.SIMD.SIMD8.Word32X8 (GHC.Prim.plusWord32X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$ctimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Word.Word32,
     GHC.Num.Num GHC.Word.Word32) =>
    Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Word.Word32)
                   ($dNum :: GHC.Num.Num GHC.Word.Word32)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Word.Word32
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ GHC.Word.Word32
                   $dNum
                   (GHC.Num.*
                      @ GHC.Word.Word32
                      $dNum
                      (GHC.Num.*
                         @ GHC.Word.Word32
                         $dNum
                         (GHC.Num.*
                            @ GHC.Word.Word32
                            $dNum
                            (GHC.Num.*
                               @ GHC.Word.Word32
                               $dNum
                               (GHC.Num.*
                                  @ GHC.Word.Word32
                                  $dNum
                                  (GHC.Num.* @ GHC.Word.Word32 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$ctimesX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild1 { Data.SIMD.SIMD8.Word32X8 v2# ->
                 (Data.SIMD.SIMD8.Word32X8 (GHC.Prim.timesWord32X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word32_$cunpackX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> (# GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
          GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32, GHC.Word.Word32,
          GHC.Word.Word32 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case GHC.Prim.unpackWord32X8#
                        v1# of wild1 { (#,,,,,,,#) r1 r2 r3 r4 r5 r6 r7 r8 ->
                 (# GHC.Word.W32# r1, GHC.Word.W32# r2, GHC.Word.W32# r3,
                    GHC.Word.W32# r4, GHC.Word.W32# r5, GHC.Word.W32# r6,
                    GHC.Word.W32# r7, GHC.Word.W32# r8 #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64 :: Data.SIMD.SIMD8.SIMD8 GHC.Word.Word64
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cplusX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cminusX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$ctimesX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cnegateX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cindexArrayAsX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cindexOffAddrAsX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cinsertX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cunpackX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cpackX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cbroadcastX8
                  Data.SIMD.SIMD8.$fPrimX8_$creadOffAddr#
                  Data.SIMD.SIMD8.$fPrimX8_$cwriteOffAddr#
                  Data.SIMD.SIMD8.$fSIMD8Word64_$cplusHorizontalX8
                  Data.SIMD.SIMD8.$fSIMD8Word64_$ctimesHorizontalX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cbroadcastX8 ::
    GHC.Word.Word64 -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Word.Word64) ->
                 case ds of wild { GHC.Word.W64# r ->
                 (Data.SIMD.SIMD8.Word64X8 (GHC.Prim.broadcastWord64X8# r))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cindexArrayAsX8 ::
    Data.Primitive.ByteArray.ByteArray
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.ByteArray.ByteArray)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.ByteArray.ByteArray ba# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord64ArrayAsWord64X8#
                        ba#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word64X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cindexOffAddrAsX8 ::
    Data.Primitive.Types.Addr
    -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Primitive.Types.Addr) (ds1 :: GHC.Types.Int) ->
                 case ds of wild { Data.Primitive.Types.Addr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case GHC.Prim.indexWord64OffAddrAsWord64X8#
                        addr#
                        i# of wild2 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word64X8 wild2)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cinsertX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Word.Word64
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (ds1 :: GHC.Word.Word64)
                   (ds2 :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case ds1 of wild1 { GHC.Word.W64# s# ->
                 case ds2 of wild2 { GHC.Types.I# i# ->
                 case GHC.Prim.insertWord64X8# v1# s# i# of wild3 { DEFAULT ->
                 (Data.SIMD.SIMD8.Word64X8 wild3)
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cminusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild1 { Data.SIMD.SIMD8.Word64X8 v2# ->
                 (Data.SIMD.SIMD8.Word64X8 (GHC.Prim.minusWord64X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cnegateX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 1, Strictness: <B,1*U>b, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD8"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD8.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 177#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 376#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 177#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 412#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case ds of tpl { DEFAULT ->
                 case GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Prim.Word64X8# -> GHC.Prim.Word64X8#)
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString# @ b "cannot negate Word64X8"#))
                 ret_ty (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                 of {} }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cpackX8 ::
    (# GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
       GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
       GHC.Word.Word64 #)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: (# GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
                             GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
                             GHC.Word.Word64 #)) ->
                 case ds of wild { (#,,,,,,,#) ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds1 of wild1 { GHC.Word.W64# r1 ->
                 case ds2 of wild2 { GHC.Word.W64# r2 ->
                 case ds3 of wild3 { GHC.Word.W64# r3 ->
                 case ds4 of wild4 { GHC.Word.W64# r4 ->
                 case ds5 of wild5 { GHC.Word.W64# r5 ->
                 case ds6 of wild6 { GHC.Word.W64# r6 ->
                 case ds7 of wild7 { GHC.Word.W64# r7 ->
                 case ds8 of wild8 { GHC.Word.W64# r8 ->
                 (Data.SIMD.SIMD8.Word64X8
                    (GHC.Prim.packWord64X8# (# r1, r2, r3, r4, r5, r6, r7, r8 #)))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } } } } } } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cplusHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Word.Word64,
     GHC.Num.Num GHC.Word.Word64) =>
    Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(C(C(S))LLLLLL),U(C(C1(U(U))),A,A,A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Word.Word64)
                   ($dNum :: GHC.Num.Num GHC.Word.Word64)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Word.Word64
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.+
                   @ GHC.Word.Word64
                   $dNum
                   (GHC.Num.+
                      @ GHC.Word.Word64
                      $dNum
                      (GHC.Num.+
                         @ GHC.Word.Word64
                         $dNum
                         (GHC.Num.+
                            @ GHC.Word.Word64
                            $dNum
                            (GHC.Num.+
                               @ GHC.Word.Word64
                               $dNum
                               (GHC.Num.+
                                  @ GHC.Word.Word64
                                  $dNum
                                  (GHC.Num.+ @ GHC.Word.Word64 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cplusX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild1 { Data.SIMD.SIMD8.Word64X8 v2# ->
                 (Data.SIMD.SIMD8.Word64X8 (GHC.Prim.plusWord64X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$ctimesHorizontalX8 ::
    (Data.SIMD.SIMD8.SIMD8 GHC.Word.Word64,
     GHC.Num.Num GHC.Word.Word64) =>
    Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S(LLC(C(S))LLLL),U(A,A,C(C1(U(U))),A,A,A,A)><L,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 GHC.Word.Word64)
                   ($dNum :: GHC.Num.Num GHC.Word.Word64)
                   (v :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ GHC.Word.Word64
                        $dSIMD8
                        v of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Num.*
                   @ GHC.Word.Word64
                   $dNum
                   (GHC.Num.*
                      @ GHC.Word.Word64
                      $dNum
                      (GHC.Num.*
                         @ GHC.Word.Word64
                         $dNum
                         (GHC.Num.*
                            @ GHC.Word.Word64
                            $dNum
                            (GHC.Num.*
                               @ GHC.Word.Word64
                               $dNum
                               (GHC.Num.*
                                  @ GHC.Word.Word64
                                  $dNum
                                  (GHC.Num.* @ GHC.Word.Word64 $dNum ipv ipv1)
                                  ipv2)
                               ipv3)
                            ipv4)
                         ipv5)
                      ipv6)
                   ipv7 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$ctimesX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (ds1 :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case ds1
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild1 { Data.SIMD.SIMD8.Word64X8 v2# ->
                 (Data.SIMD.SIMD8.Word64X8 (GHC.Prim.timesWord64X8# v1# v2#))
                   `cast`
                 (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fSIMD8Word64_$cunpackX8 ::
    Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> (# GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
          GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64, GHC.Word.Word64,
          GHC.Word.Word64 #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.SIMD.SIMD8.X8 GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case GHC.Prim.unpackWord64X8#
                        v1# of wild1 { (#,,,,,,,#) r1 r2 r3 r4 r5 r6 r7 r8 ->
                 (# GHC.Word.W64# r1, GHC.Word.W64# r2, GHC.Word.W64# r3,
                    GHC.Word.W64# r4, GHC.Word.W64# r5, GHC.Word.W64# r6,
                    GHC.Word.W64# r7, GHC.Word.W64# r8 #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fShowX8 ::
    (GHC.Show.Show a, Data.SIMD.SIMD8.SIMD8 a) =>
    GHC.Show.Show (Data.SIMD.SIMD8.X8 a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,C(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dShow :: GHC.Show.Show a)
                      ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a).
                  @ (Data.SIMD.SIMD8.X8 a)
                  (Data.SIMD.SIMD8.$fShowX8_$cshowsPrec @ a $dShow $dSIMD8)
                  (Data.SIMD.SIMD8.$fShowX8_$cshow @ a $dShow $dSIMD8)
                  (Data.SIMD.SIMD8.$fShowX8_$cshowList @ a $dShow $dSIMD8) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fShowX8_$cshow ::
    (GHC.Show.Show a, Data.SIMD.SIMD8.SIMD8 a) =>
    Data.SIMD.SIMD8.X8 a -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Data.SIMD.SIMD8.SIMD8 a)
                   (w2 :: Data.SIMD.SIMD8.X8 a) ->
                 case Data.SIMD.SIMD8.$w$cshow @ a w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fShowX8_$cshowList ::
    (GHC.Show.Show a, Data.SIMD.SIMD8.SIMD8 a) =>
    [Data.SIMD.SIMD8.X8 a] -> GHC.Show.ShowS
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(A,A,A,A,A,A,A,C(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   (ls :: [Data.SIMD.SIMD8.X8 a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.SIMD.SIMD8.X8 a)
                   (\ (x :: Data.SIMD.SIMD8.X8 a) (s1 :: GHC.Base.String)[OneShot] ->
                    case Data.SIMD.SIMD8.$w$cshow
                           @ a
                           $dShow
                           $dSIMD8
                           x of ww { (#,#) ww1 ww2 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                      s1 })
                   ls
                   s) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fShowX8_$cshowsPrec ::
    (GHC.Show.Show a, Data.SIMD.SIMD8.SIMD8 a) =>
    GHC.Types.Int -> Data.SIMD.SIMD8.X8 a -> GHC.Show.ShowS
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><L,A><L,U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   (ds :: GHC.Types.Int)
                   (x :: Data.SIMD.SIMD8.X8 a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.SIMD.SIMD8.$fShowX8_$cshow @ a $dShow $dSIMD8 x))
                   s) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX1 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild1 { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case (GHC.Prim.writeWord64OffAddrAsWord64X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX10 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild1 { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case (GHC.Prim.writeInt64OffAddrAsInt64X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX11 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Int.Int64 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readInt64OffAddrAsInt64X8#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX12 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild2 { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case (GHC.Prim.writeInt64OffAddrAsInt64X8#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX13 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Int.Int64 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readInt64OffAddrAsInt64X8#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int640[0])) #) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX14 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild1 { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case (GHC.Prim.writeInt32OffAddrAsInt32X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX15 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Int.Int32 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readInt32OffAddrAsInt32X8#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX16 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild2 { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case (GHC.Prim.writeInt32OffAddrAsInt32X8#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX17 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Int.Int32 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readInt32OffAddrAsInt32X8#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Int32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Int320[0])) #) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX18 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild1 { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case (GHC.Prim.writeDoubleOffAddrAsDoubleX8#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX19 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Types.Double #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readDoubleOffAddrAsDoubleX8#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.DoubleX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX2 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Word.Word64 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readWord64OffAddrAsWord64X8#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX20 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild2 { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case (GHC.Prim.writeDoubleOffAddrAsDoubleX8#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX21 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readDoubleOffAddrAsDoubleX8#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.DoubleX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Double0[0])) #) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX22 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild1 { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case (GHC.Prim.writeFloatOffAddrAsFloatX8#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX23 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Types.Float #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readFloatOffAddrAsFloatX8#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.FloatX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX24 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild2 { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case (GHC.Prim.writeFloatOffAddrAsFloatX8#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX25 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Types.Float #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readFloatOffAddrAsFloatX8#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.FloatX8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Float0[0])) #) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX3 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild2 { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case (GHC.Prim.writeWord64OffAddrAsWord64X8#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX4 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Word.Word64 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readWord64OffAddrAsWord64X8#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word64X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word640[0])) #) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX5 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild1 { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case (GHC.Prim.writeWord32OffAddrAsWord32X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX6 ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Word.Word32 #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ptr :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr# ->
                 case GHC.Prim.readWord32OffAddrAsWord32X8#
                        @ GHC.Prim.RealWorld
                        addr#
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) #) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX7 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case eta
                        `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild2 { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case (GHC.Prim.writeWord32OffAddrAsWord32X8#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         v1#
                         eta1)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                  Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
                  Data.SIMD.SIMD8.$fStorableX8_$cpeekElemOff
                  Data.SIMD.SIMD8.$fStorableX8_$cpokeElemOff
                  Data.SIMD.SIMD8.$fStorableX8_$cpeekByteOff
                  Data.SIMD.SIMD8.$fStorableX8_$cpokeByteOff
                  Data.SIMD.SIMD8.$fStorableX8_$cpeek
                  Data.SIMD.SIMD8.$fStorableX8_$cpoke -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                  Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
                  Data.SIMD.SIMD8.$fStorableX80_$cpeekElemOff
                  Data.SIMD.SIMD8.$fStorableX80_$cpokeElemOff
                  Data.SIMD.SIMD8.$fStorableX80_$cpeekByteOff
                  Data.SIMD.SIMD8.$fStorableX80_$cpokeByteOff
                  Data.SIMD.SIMD8.$fStorableX80_$cpeek
                  Data.SIMD.SIMD8.$fStorableX80_$cpoke -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX6
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX9
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD8.$fPrimX80_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX5
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX7
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX80_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word320[0]) of wild2 { Data.SIMD.SIMD8.Word32X8 v1# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeWord32OffAddrAsWord32X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                  Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
                  Data.SIMD.SIMD8.$fStorableX81_$cpeekElemOff
                  Data.SIMD.SIMD8.$fStorableX81_$cpokeElemOff
                  Data.SIMD.SIMD8.$fStorableX81_$cpeekByteOff
                  Data.SIMD.SIMD8.$fStorableX81_$cpokeByteOff
                  Data.SIMD.SIMD8.$fStorableX81_$cpeek
                  Data.SIMD.SIMD8.$fStorableX81_$cpoke -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX11
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX13
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD8.$fPrimX81_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX10
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX12
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX81_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int640[0]) of wild2 { Data.SIMD.SIMD8.Int64X8 v1# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeInt64OffAddrAsInt64X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                  Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
                  Data.SIMD.SIMD8.$fStorableX82_$cpeekElemOff
                  Data.SIMD.SIMD8.$fStorableX82_$cpokeElemOff
                  Data.SIMD.SIMD8.$fStorableX82_$cpeekByteOff
                  Data.SIMD.SIMD8.$fStorableX82_$cpokeByteOff
                  Data.SIMD.SIMD8.$fStorableX82_$cpeek
                  Data.SIMD.SIMD8.$fStorableX82_$cpoke -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX15
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX17
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD8.$fPrimX82_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX14
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX16
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX82_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD8.D:R:X8Int320[0]) of wild2 { Data.SIMD.SIMD8.Int32X8 v1# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeInt32OffAddrAsInt32X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                  Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
                  Data.SIMD.SIMD8.$fStorableX83_$cpeekElemOff
                  Data.SIMD.SIMD8.$fStorableX83_$cpokeElemOff
                  Data.SIMD.SIMD8.$fStorableX83_$cpeekByteOff
                  Data.SIMD.SIMD8.$fStorableX83_$cpokeByteOff
                  Data.SIMD.SIMD8.$fStorableX83_$cpeek
                  Data.SIMD.SIMD8.$fStorableX83_$cpoke -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX19
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Types.Double>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX21
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Types.Double>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD8.$fPrimX83_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Types.Double>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX18
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX20
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX83_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD8.D:R:X8Double0[0]) of wild2 { Data.SIMD.SIMD8.DoubleX8 v1# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeDoubleOffAddrAsDoubleX8#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84 ::
    Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                  Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
                  Data.SIMD.SIMD8.$fStorableX84_$cpeekElemOff
                  Data.SIMD.SIMD8.$fStorableX84_$cpokeElemOff
                  Data.SIMD.SIMD8.$fStorableX84_$cpeekByteOff
                  Data.SIMD.SIMD8.$fStorableX84_$cpokeByteOff
                  Data.SIMD.SIMD8.$fStorableX84_$cpeek
                  Data.SIMD.SIMD8.$fStorableX84_$cpoke -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX23
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Types.Float>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX25
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Types.Float>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD8.$fPrimX84_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Types.Float>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX22
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX24
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX84_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD8.D:R:X8Float0[0]) of wild2 { Data.SIMD.SIMD8.FloatX8 v1# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeFloatOffAddrAsFloatX8#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8_$cpeek ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX2
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8_$cpeekByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX4
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8_$cpeekElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int
    -> GHC.Types.IO (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (ds1 :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 Data.SIMD.SIMD8.$fPrimX8_$creadOffAddr#
                   @ GHC.Prim.RealWorld
                   addr#
                   i#
                   eta } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8_$cpoke ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX1
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.SIMD.SIMD8.$fStorableX3
                  `cast`
                (forall (b :: <*>_N).
                 <GHC.Ptr.Ptr b>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX8_$cpokeElemOff ::
    GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (ds1 :: GHC.Types.Int)
                   (a :: Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { GHC.Ptr.Ptr addr# ->
                 case ds1 of wild1 { GHC.Types.I# i# ->
                 case a `cast`
                      (Data.SIMD.SIMD8.D:R:X8Word640[0]) of wild2 { Data.SIMD.SIMD8.Word64X8 v1# ->
                 case Data.SIMD.SIMD8.mul8 i# of wild3 { DEFAULT ->
                 case (GHC.Prim.writeWord64OffAddrAsWord64X8#
                         @ GHC.Prim.RealWorld
                         addr#
                         wild3
                         v1#
                         eta)
                        `cast`
                      (GHC.Prim.State#
                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of s'# { DEFAULT ->
                 (# s'#, GHC.Tuple.() #)
                   `cast`
                 ((#,#)
                    <'GHC.Types.VoidRep>_R
                    <'GHC.Types.PtrRepLifted>_R
                    (GHC.Prim.State# (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R
                    <()>_R)_R } } } } })
                  `cast`
                (<GHC.Ptr.Ptr (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fStorableX9 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.SIMD.SIMD8.X8 GHC.Word.Word32 #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readWord32OffAddrAsWord32X8#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (Data.SIMD.SIMD8.Word32X8 ipv1)
                      `cast`
                    (Sym (Data.SIMD.SIMD8.D:R:X8Word320[0])) #) } } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fUnboxX8 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                  Data.SIMD.SIMD8.$fVectorVectorX8
                  Data.SIMD.SIMD8.$fMVectorMVectorX8 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fUnboxX80 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                  Data.SIMD.SIMD8.$fVectorVectorX80
                  Data.SIMD.SIMD8.$fMVectorMVectorX80 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fUnboxX81 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                  Data.SIMD.SIMD8.$fVectorVectorX81
                  Data.SIMD.SIMD8.$fMVectorMVectorX81 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fUnboxX82 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                  Data.SIMD.SIMD8.$fVectorVectorX82
                  Data.SIMD.SIMD8.$fMVectorMVectorX82 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fUnboxX83 ::
    Data.Vector.Unboxed.Base.Unbox
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                  Data.SIMD.SIMD8.$fVectorVectorX83
                  Data.SIMD.SIMD8.$fMVectorMVectorX83 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fUnboxX84 ::
    Data.Vector.Unboxed.Base.Unbox (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                  Data.SIMD.SIMD8.$fVectorVectorX84
                  Data.SIMD.SIMD8.$fMVectorMVectorX84 -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                  Data.SIMD.SIMD8.$fMVectorMVectorX8
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD8.X8 GHC.Word.Word64>_N)_R
                  Data.SIMD.SIMD8.$fVectorVectorX8_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD8.$fVectorVectorX8_$cbasicUnsafeThaw
                  Data.SIMD.SIMD8.$fVectorVectorX8_$cbasicLength
                  Data.SIMD.SIMD8.$fVectorVectorX8_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fVectorVectorX8_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD8.$fVectorVectorX8_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fVectorVectorX8_$celemseq -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                  Data.SIMD.SIMD8.$fMVectorMVectorX80
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD8.X8 GHC.Word.Word32>_N)_R
                  Data.SIMD.SIMD8.$fVectorVectorX80_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD8.$fVectorVectorX80_$cbasicUnsafeThaw
                  Data.SIMD.SIMD8.$fVectorVectorX80_$cbasicLength
                  Data.SIMD.SIMD8.$fVectorVectorX80_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fVectorVectorX80_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD8.$fVectorVectorX80_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fVectorVectorX80_$celemseq -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX82[0])
                           (Data.SIMD.SIMD8.N:R:VectorX81[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD8.X8
                                                                                           GHC.Word.Word32>_N)
                           (Trans
                                (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX82[0])
                           (Data.SIMD.SIMD8.N:R:VectorX81[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 32#)
                           dt2
                           (GHC.Prim.*# dt 32#)
                           (GHC.Prim.*# dt1 32#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX81[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX82[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD8.X8
                                                                                              GHC.Word.Word32>_N)
                              (Trans
                                   (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX82[0])
                           (Data.SIMD.SIMD8.N:R:VectorX81[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                   @ (m (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (Data.SIMD.SIMD8.$fPrimX80_$cindexByteArray# dt2 i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX81[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX82[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX82[0])
                              (Data.SIMD.SIMD8.N:R:VectorX81[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                      dt4
                      dt6
                      dt2 } } })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX81[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX82[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX82[0])
                              (Data.SIMD.SIMD8.N:R:VectorX81[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD8.X8 GHC.Word.Word32)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD8.X8
                                                                                            GHC.Word.Word32>_N)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX80_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word32 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word32)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32) @ b) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                  Data.SIMD.SIMD8.$fMVectorMVectorX81
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD8.X8 GHC.Int.Int64>_N)_R
                  Data.SIMD.SIMD8.$fVectorVectorX81_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD8.$fVectorVectorX81_$cbasicUnsafeThaw
                  Data.SIMD.SIMD8.$fVectorVectorX81_$cbasicLength
                  Data.SIMD.SIMD8.$fVectorVectorX81_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fVectorVectorX81_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD8.$fVectorVectorX81_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fVectorVectorX81_$celemseq -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX84[0])
                           (Data.SIMD.SIMD8.N:R:VectorX83[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD8.X8
                                                                                           GHC.Int.Int64>_N)
                           (Trans
                                (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX84[0])
                           (Data.SIMD.SIMD8.N:R:VectorX83[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 32#)
                           dt2
                           (GHC.Prim.*# dt 32#)
                           (GHC.Prim.*# dt1 32#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX83[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX84[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD8.X8
                                                                                              GHC.Int.Int64>_N)
                              (Trans
                                   (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX84[0])
                           (Data.SIMD.SIMD8.N:R:VectorX83[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                   @ (m (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (GHC.Base.return @ m $dMonad @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (Data.SIMD.SIMD8.$fPrimX81_$cindexByteArray# dt2 i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX83[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX84[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX84[0])
                              (Data.SIMD.SIMD8.N:R:VectorX83[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                      dt4
                      dt6
                      dt2 } } })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX83[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX84[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX84[0])
                              (Data.SIMD.SIMD8.N:R:VectorX83[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD8.X8 GHC.Int.Int64)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD8.X8
                                                                                            GHC.Int.Int64>_N)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX81_$celemseq ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int64 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int64)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64) @ b) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                  Data.SIMD.SIMD8.$fMVectorMVectorX82
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD8.X8 GHC.Int.Int32>_N)_R
                  Data.SIMD.SIMD8.$fVectorVectorX82_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD8.$fVectorVectorX82_$cbasicUnsafeThaw
                  Data.SIMD.SIMD8.$fVectorVectorX82_$cbasicLength
                  Data.SIMD.SIMD8.$fVectorVectorX82_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fVectorVectorX82_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD8.$fVectorVectorX82_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fVectorVectorX82_$celemseq -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX86[0])
                           (Data.SIMD.SIMD8.N:R:VectorX85[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD8.X8
                                                                                           GHC.Int.Int32>_N)
                           (Trans
                                (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX86[0])
                           (Data.SIMD.SIMD8.N:R:VectorX85[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 32#)
                           dt2
                           (GHC.Prim.*# dt 32#)
                           (GHC.Prim.*# dt1 32#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX85[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX86[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD8.X8
                                                                                              GHC.Int.Int32>_N)
                              (Trans
                                   (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX86[0])
                           (Data.SIMD.SIMD8.N:R:VectorX85[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                   @ (m (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (GHC.Base.return @ m $dMonad @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (Data.SIMD.SIMD8.$fPrimX82_$cindexByteArray# dt2 i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX85[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX86[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX86[0])
                              (Data.SIMD.SIMD8.N:R:VectorX85[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                      dt4
                      dt6
                      dt2 } } })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX85[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX86[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX86[0])
                              (Data.SIMD.SIMD8.N:R:VectorX85[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD8.X8 GHC.Int.Int32)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD8.X8
                                                                                            GHC.Int.Int32>_N)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX82_$celemseq ::
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    -> Data.SIMD.SIMD8.X8 GHC.Int.Int32 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Int.Int32)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32) @ b) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                  Data.SIMD.SIMD8.$fMVectorMVectorX83
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD8.X8 GHC.Types.Double>_N)_R
                  Data.SIMD.SIMD8.$fVectorVectorX83_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD8.$fVectorVectorX83_$cbasicUnsafeThaw
                  Data.SIMD.SIMD8.$fVectorVectorX83_$cbasicLength
                  Data.SIMD.SIMD8.$fVectorVectorX83_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fVectorVectorX83_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD8.$fVectorVectorX83_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fVectorVectorX83_$celemseq -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX88[0])
                           (Data.SIMD.SIMD8.N:R:VectorX87[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD8.X8
                                                                                           GHC.Types.Double>_N)
                           (Trans
                                (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX88[0])
                           (Data.SIMD.SIMD8.N:R:VectorX87[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 32#)
                           dt2
                           (GHC.Prim.*# dt 32#)
                           (GHC.Prim.*# dt1 32#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX87[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX88[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD8.X8
                                                                                              GHC.Types.Double>_N)
                              (Trans
                                   (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX88[0])
                           (Data.SIMD.SIMD8.N:R:VectorX87[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                   @ (m (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (Data.SIMD.SIMD8.$fPrimX83_$cindexByteArray# dt2 i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX87[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX88[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX88[0])
                              (Data.SIMD.SIMD8.N:R:VectorX87[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                      dt4
                      dt6
                      dt2 } } })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX87[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX88[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX88[0])
                              (Data.SIMD.SIMD8.N:R:VectorX87[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Double))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD8.X8 GHC.Types.Double)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD8.X8
                                                                                            GHC.Types.Double>_N)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX83_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Double -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Double)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD8.X8 GHC.Types.Double) @ b) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84 ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                  Data.SIMD.SIMD8.$fMVectorMVectorX84
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Data.SIMD.SIMD8.X8 GHC.Types.Float>_N)_R
                  Data.SIMD.SIMD8.$fVectorVectorX84_$cbasicUnsafeFreeze
                  Data.SIMD.SIMD8.$fVectorVectorX84_$cbasicUnsafeThaw
                  Data.SIMD.SIMD8.$fVectorVectorX84_$cbasicLength
                  Data.SIMD.SIMD8.$fVectorVectorX84_$cbasicUnsafeSlice
                  Data.SIMD.SIMD8.$fVectorVectorX84_$cbasicUnsafeIndexM
                  Data.SIMD.SIMD8.$fVectorVectorX84_$cbasicUnsafeCopy
                  Data.SIMD.SIMD8.$fVectorVectorX84_$celemseq -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX810[0])
                           (Data.SIMD.SIMD8.N:R:VectorX89[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD8.X8
                                                                                           GHC.Types.Float>_N)
                           (Trans
                                (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX810[0])
                           (Data.SIMD.SIMD8.N:R:VectorX89[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 32#)
                           dt2
                           (GHC.Prim.*# dt 32#)
                           (GHC.Prim.*# dt1 32#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX89[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX810[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD8.X8
                                                                                              GHC.Types.Float>_N)
                              (Trans
                                   (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX810[0])
                           (Data.SIMD.SIMD8.N:R:VectorX89[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                   @ (m (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (Data.SIMD.SIMD8.$fPrimX84_$cindexByteArray# dt2 i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Types.Float)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX89[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX810[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX810[0])
                              (Data.SIMD.SIMD8.N:R:VectorX89[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                      dt4
                      dt6
                      dt2 } } })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Types.Float))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX89[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX810[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX810[0])
                              (Data.SIMD.SIMD8.N:R:VectorX89[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Types.Float))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD8.X8 GHC.Types.Float)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD8.X8
                                                                                            GHC.Types.Float>_N)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX84_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    -> Data.SIMD.SIMD8.X8 GHC.Types.Float -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Types.Float)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD8.X8 GHC.Types.Float) @ b) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX80[0])
                           (Data.SIMD.SIMD8.N:R:VectorX8[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 GHC.Types.I# dt1 }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Data.SIMD.SIMD8.X8
                                                                                           GHC.Word.Word64>_N)
                           (Trans
                                (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                     <Control.Monad.Primitive.PrimState m>_N)
                                (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                 case ds1
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX80[0])
                           (Data.SIMD.SIMD8.N:R:VectorX8[0])) of wild1 { Data.Vector.Primitive.Vector dt3 dt4 dt5 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State#
                               (Control.Monad.Primitive.PrimState m))[OneShot] ->
                    case GHC.Prim.copyByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt5
                           (GHC.Prim.*# dt3 32#)
                           dt2
                           (GHC.Prim.*# dt 32#)
                           (GHC.Prim.*# dt1 32#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Generic.Base.Mutable
                             Data.Vector.Unboxed.Base.Vector
                             (Control.Monad.Primitive.PrimState m)
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX8[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX80[0])))
                   (case eta
                           `cast`
                         (Trans
                              (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                      m>_N <Data.SIMD.SIMD8.X8
                                                                                              GHC.Word.Word64>_N)
                              (Trans
                                   (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                        <Control.Monad.Primitive.PrimState m>_N)
                                   (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                        <Control.Monad.Primitive.PrimState
                                           m>_N))) of wild { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ Data.Primitive.ByteArray.ByteArray
                      @ (Data.Vector.Primitive.Vector
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.$WVector
                         @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ Data.Primitive.ByteArray.ByteArray
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          case GHC.Prim.unsafeFreezeByteArray#
                                 @ (Control.Monad.Primitive.PrimState m)
                                 dt2
                                 s# of ds1 { (#,#) ipv ipv1 ->
                          (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) })) })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> GHC.Types.Int -> m (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLS),1*U(U,A,U)><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (m :: * -> *)
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Trans
                           (Data.SIMD.SIMD8.D:R:VectorX80[0])
                           (Data.SIMD.SIMD8.N:R:VectorX8[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c+
                        (GHC.Types.I# dt)
                        i of wild1 { GHC.Types.I# i# ->
                 GHC.Base.$!
                   @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                   @ (m (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (Data.SIMD.SIMD8.$fPrimX8_$cindexByteArray# dt2 i#) } }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.Vector.Unboxed.Base.Vector
         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.Vector.Primitive.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (\ (tpl :: Data.Vector.Primitive.Vector
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Vector
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:VectorX8[0]))
                             (Sym (Data.SIMD.SIMD8.D:R:VectorX80[0])))
                   (case ds
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX80[0])
                              (Data.SIMD.SIMD8.N:R:VectorX8[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    case GHC.Num.$fNumInt_$c+
                           (GHC.Types.I# dt)
                           i of dt3 { GHC.Types.I# dt4 ->
                    case n of dt5 { GHC.Types.I# dt6 ->
                    Data.Vector.Primitive.Vector
                      @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                      dt4
                      dt6
                      dt2 } } })) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),U(U,1*C1(U))><L,1*U(U,U,U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ (m :: * -> *)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (eta :: Data.Vector.Unboxed.Base.Vector
                             (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 GHC.Base.liftM
                   @ m
                   @ (Data.Vector.Primitive.Mutable.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   (\ (tpl :: Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                    tpl)
                     `cast`
                   (<Data.Vector.Primitive.Mutable.MVector
                       (Control.Monad.Primitive.PrimState m)
                       (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                    ->_R Trans
                             (Sym (Data.SIMD.SIMD8.N:R:MVectorsX8[0]
                                       <Control.Monad.Primitive.PrimState m>_N))
                             (Sym (Data.SIMD.SIMD8.D:R:MVectorsX80[0]
                                       <Control.Monad.Primitive.PrimState m>_N)))
                   (case eta
                           `cast`
                         (Trans
                              (Data.SIMD.SIMD8.D:R:VectorX80[0])
                              (Data.SIMD.SIMD8.N:R:VectorX8[0])) of wild { Data.Vector.Primitive.Vector dt dt1 dt2 ->
                    GHC.Base.liftM
                      @ m
                      @ (Data.Primitive.ByteArray.MutableByteArray
                           (Control.Monad.Primitive.PrimState m))
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      (Data.Vector.Primitive.Mutable.$WMVector
                         @ (Control.Monad.Primitive.PrimState m)
                         @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                         (GHC.Types.I# dt)
                         (GHC.Types.I# dt1))
                      (Control.Monad.Primitive.primitive
                         @ m
                         $dPrimMonad
                         @ (Data.Primitive.ByteArray.MutableByteArray
                              (Control.Monad.Primitive.PrimState m))
                         (\ (s# :: GHC.Prim.State#
                                     (Control.Monad.Primitive.PrimState m))[OneShot] ->
                          (# s#,
                             Data.Primitive.ByteArray.MutableByteArray
                               @ (Control.Monad.Primitive.PrimState m)
                               dt2
                                 `cast`
                               (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    m))) #))) }))
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R <Data.Vector.Unboxed.Base.Vector
                         (Data.SIMD.SIMD8.X8 GHC.Word.Word64)>_R
                 ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                    m>_N <Data.SIMD.SIMD8.X8
                                                                                            GHC.Word.Word64>_N)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $fVectorVectorX8_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    -> Data.SIMD.SIMD8.X8 GHC.Word.Word64 -> b -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Data.SIMD.SIMD8.X8 GHC.Word.Word64)) ->
                 GHC.Prim.seq @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64) @ b) -}
4c45188e2c40ffbf5753ce2390d81d23
  $tc'C:SIMD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SIMD8"#) -}
74e97217b2bc00885aa648090ccf655e
  $tc'C:SIMD8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9337638036549571955##
                   12483950916175667564##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tc'C:SIMD1) -}
30405c1ee824a7285b14ddb375d5f0fc
  $tc'C:SIMD8Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17941715917248592650##
                   2147380929987219654##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tc'C:SIMD8Float1) -}
b1001399b09d5e48ae5910be8d5aae92
  $tc'C:SIMD8Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SIMD8Float"#) -}
86a4bcb4e4ad12cca7b27841f00e515f
  $tc'UnsafePrimVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15311189542392037098##
                   6240367192629454915##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tc'UnsafePrimVector1) -}
473bf235535d4f8ee3a0ef20cd079523
  $tc'UnsafePrimVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnsafePrimVector"#) -}
f5db152d88b1d5430b3a1ede17e73924
  $tcSIMD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SIMD8"#) -}
b3024c1de27ff310434af2e886c5b305
  $tcSIMD8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16892193082325839791##
                   4273870024776100319##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tcSIMD1) -}
56e0680b00bc12d346caf7149e4875e3
  $tcSIMD8Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18035456752847338847##
                   1715974405953292425##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tcSIMD8Float1) -}
7ce8cf9732ce5e355f4a804928f564ed
  $tcSIMD8Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SIMD8Float"#) -}
5a8482160a65e94bcb885f6e1303d37b
  $tcUnsafePrimVector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17343350663122198506##
                   2243619923525357702##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tcUnsafePrimVector1) -}
521534e56e08391b5656f279193ee088
  $tcUnsafePrimVector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UnsafePrimVector"#) -}
7e6ba050f9c12191e37ab4bb6f7f6881
  $tcX1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "X8"#) -}
f5383f63986369e7630354dab46bf5f6
  $tcX8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7035607664856657455##
                   10702458304620306865##
                   Data.SIMD.SIMD8.$trModule
                   Data.SIMD.SIMD8.$tcX1) -}
a903d09d5a3a0e5b829e122542153921
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.SIMD.SIMD8.$trModule2
                   Data.SIMD.SIMD8.$trModule1) -}
ebd7018113e63402e592d9759b7e33ee
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.SIMD.SIMD8"#) -}
a3ed68519b28a5df08a0889d846b2011
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
611c1e89a73f0d97fd58556861deea3e
  $w$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 32#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 32#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 32#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
6bf20cda0efc4b51685300b7d5397bd3
  $w$cbasicUnsafeMove1 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 32#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 32#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 32#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
6eeb5c15aac05419e4d27f77415aa564
  $w$cbasicUnsafeMove2 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 32#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 32#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 32#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
c5dd00da6f2ddcc7592999008668a874
  $w$cbasicUnsafeMove3 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 32#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 32#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 32#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
274bb4c076309ee3d7d8f04f003bb776
  $w$cbasicUnsafeMove4 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 32#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 32#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 32#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
f40a750821c63c764d57f3469cabb957
  $w$cbasicUnsafeMove5 ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableByteArray# (Control.Monad.Primitive.PrimState m)
    -> m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ (m :: * -> *)
                   (w :: Control.Monad.Primitive.PrimMonad m)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m))
                   (ww3 :: GHC.Prim.Int#)
                   (ww4 :: GHC.Prim.MutableByteArray#
                             (Control.Monad.Primitive.PrimState m)) ->
                 Control.Monad.Primitive.primitive
                   @ m
                   w
                   @ ()
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case {__pkg_ccall primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh hsprimitive_memmove forall s.
                                                                                                                     GHC.Prim.MutableByteArray#
                                                                                                                       s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.MutableByteArray#
                                                                                                                          s
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Word#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           ww2
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww 32#))
                           ww4
                           (GHC.Prim.narrow32Int# (GHC.Prim.*# ww3 32#))
                           (GHC.Prim.int2Word# (GHC.Prim.*# ww1 32#))
                           eta of wild { Unit# ds11 ->
                    (# ds11, GHC.Tuple.() #) })
                     `cast`
                   ((GHC.Prim.State#
                       (Trans
                            (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                            (Control.Monad.Primitive.PrimState
                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.VoidRep>_R
                            <'GHC.Types.PtrRepLifted>_R
                            (GHC.Prim.State#
                               (Trans
                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]))
                                    (Control.Monad.Primitive.PrimState
                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R)) -}
9d5ec4950535b150e5e9fce2fca4e23d
  $w$cshow ::
    (GHC.Show.Show a, Data.SIMD.SIMD8.SIMD8 a) =>
    Data.SIMD.SIMD8.X8 a -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(LLLLLLLC(S)LLLLLL),1*U(A,A,A,A,A,A,A,1*C1(U(U,U,U,U,U,U,U,U)),A,A,A,A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Data.SIMD.SIMD8.SIMD8 a)
                   (w2 :: Data.SIMD.SIMD8.X8 a) ->
                 case Data.SIMD.SIMD8.unpackX8
                        @ a
                        w1
                        w2 of ds { (#,,,,,,,#) ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 GHC.Show.$w$cshowsPrec9
                   @ a
                   @ a
                   @ a
                   @ a
                   @ a
                   @ a
                   @ a
                   @ a
                   w
                   w
                   w
                   w
                   w
                   w
                   w
                   w
                   ipv
                   ipv1
                   ipv2
                   ipv3
                   ipv4
                   ipv5
                   ipv6
                   ipv7
                   (GHC.Types.[] @ GHC.Types.Char) }) -}
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:MVectorsX80::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
        = Data.SIMD.SIMD8.R:MVectorsX8 s
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:MVectorsX810::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
        = Data.SIMD.SIMD8.R:MVectorsX89 s
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:MVectorsX82::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
        = Data.SIMD.SIMD8.R:MVectorsX81 s
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:MVectorsX84::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
        = Data.SIMD.SIMD8.R:MVectorsX83 s
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:MVectorsX86::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
        = Data.SIMD.SIMD8.R:MVectorsX85 s
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:MVectorsX88::
    [s]
      Data.Vector.Unboxed.Base.MVector
        s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
        = Data.SIMD.SIMD8.R:MVectorsX87 s
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:VectorX80::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
        = Data.SIMD.SIMD8.R:VectorX8
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:VectorX810::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD8.X8 GHC.Types.Float)
        = Data.SIMD.SIMD8.R:VectorX89
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:VectorX82::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
        = Data.SIMD.SIMD8.R:VectorX81
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:VectorX84::
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
        = Data.SIMD.SIMD8.R:VectorX83
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:VectorX86::
      Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
        = Data.SIMD.SIMD8.R:VectorX85
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:VectorX88::
      Data.Vector.Unboxed.Base.Vector
        (Data.SIMD.SIMD8.X8 GHC.Types.Double)
        = Data.SIMD.SIMD8.R:VectorX87
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:X8Double0::
      Data.SIMD.SIMD8.X8 GHC.Types.Double = Data.SIMD.SIMD8.R:X8Double
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:X8Float0::
      Data.SIMD.SIMD8.X8 GHC.Types.Float = Data.SIMD.SIMD8.R:X8Float
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:X8Int320::
      Data.SIMD.SIMD8.X8 GHC.Int.Int32 = Data.SIMD.SIMD8.R:X8Int32
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:X8Int640::
      Data.SIMD.SIMD8.X8 GHC.Int.Int64 = Data.SIMD.SIMD8.R:X8Int64
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:X8Word320::
      Data.SIMD.SIMD8.X8 GHC.Word.Word32 = Data.SIMD.SIMD8.R:X8Word32
9d5ec4950535b150e5e9fce2fca4e23d
  axiom D:R:X8Word640::
      Data.SIMD.SIMD8.X8 GHC.Word.Word64 = Data.SIMD.SIMD8.R:X8Word64
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    = MV_Word64X8 (Data.Vector.Primitive.Mutable.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    = MV_Word32X8 (Data.Vector.Primitive.Mutable.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    = MV_Int64X8 (Data.Vector.Primitive.Mutable.MVector
                    s (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    = MV_Int32X8 (Data.Vector.Primitive.Mutable.MVector
                    s (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    = MV_DoubleX8 (Data.Vector.Primitive.Mutable.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Types.Double))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.MVector
                     s (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    = MV_FloatX8 (Data.Vector.Primitive.Mutable.MVector
                    s (Data.SIMD.SIMD8.X8 GHC.Types.Float))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
    = V_Word64X8 (Data.Vector.Primitive.Vector
                    (Data.SIMD.SIMD8.X8 GHC.Word.Word64))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
    = V_Word32X8 (Data.Vector.Primitive.Vector
                    (Data.SIMD.SIMD8.X8 GHC.Word.Word32))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
    = V_Int64X8 (Data.Vector.Primitive.Vector
                   (Data.SIMD.SIMD8.X8 GHC.Int.Int64))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
    = V_Int32X8 (Data.Vector.Primitive.Vector
                   (Data.SIMD.SIMD8.X8 GHC.Int.Int32))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD8.X8 GHC.Types.Double)
    = V_DoubleX8 (Data.Vector.Primitive.Vector
                    (Data.SIMD.SIMD8.X8 GHC.Types.Double))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  newtype instance Data.Vector.Unboxed.Base.Vector
                     (Data.SIMD.SIMD8.X8 GHC.Types.Float)
    = V_FloatX8 (Data.Vector.Primitive.Vector
                   (Data.SIMD.SIMD8.X8 GHC.Types.Float))
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  data instance Data.SIMD.SIMD8.X8 GHC.Types.Double
    = DoubleX8 GHC.Prim.DoubleX8#
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  data instance Data.SIMD.SIMD8.X8 GHC.Types.Float
    = FloatX8 GHC.Prim.FloatX8#
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  data instance Data.SIMD.SIMD8.X8 GHC.Int.Int32
    = Int32X8 GHC.Prim.Int32X8#
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  data instance Data.SIMD.SIMD8.X8 GHC.Int.Int64
    = Int64X8 GHC.Prim.Int64X8#
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  data instance Data.SIMD.SIMD8.X8 GHC.Word.Word32
    = Word32X8 GHC.Prim.Word32X8#
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  data instance Data.SIMD.SIMD8.X8 GHC.Word.Word64
    = Word64X8 GHC.Prim.Word64X8#
    RecFlag: Recursive
9d5ec4950535b150e5e9fce2fca4e23d
  class SIMD8 a where
    data family X8 a
    plusX8 :: Data.SIMD.SIMD8.X8 a
              -> Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
    minusX8 :: Data.SIMD.SIMD8.X8 a
               -> Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
    timesX8 :: Data.SIMD.SIMD8.X8 a
               -> Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
    negateX8 :: Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
    indexArrayAsX8 :: Data.Primitive.ByteArray.ByteArray
                      -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 a
    indexOffAddrAsX8 :: Data.Primitive.Types.Addr
                        -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 a
    insertX8 :: Data.SIMD.SIMD8.X8 a
                -> a -> GHC.Types.Int -> Data.SIMD.SIMD8.X8 a
    unpackX8 :: Data.SIMD.SIMD8.X8 a -> (# a, a, a, a, a, a, a, a #)
    packX8 :: (# a, a, a, a, a, a, a, a #) -> Data.SIMD.SIMD8.X8 a
    broadcastX8 :: a -> Data.SIMD.SIMD8.X8 a
    readOffAddrAsX8 :: GHC.Prim.Addr#
                       -> GHC.Prim.Int#
                       -> GHC.Prim.State# s
                       -> (# GHC.Prim.State# s, Data.SIMD.SIMD8.X8 a #)
    writeOffAddrAsX8 :: GHC.Prim.Addr#
                        -> GHC.Prim.Int#
                        -> Data.SIMD.SIMD8.X8 a
                        -> GHC.Prim.State# s
                        -> GHC.Prim.State# s
    plusHorizontalX8 :: (Data.SIMD.SIMD8.SIMD8 a, GHC.Num.Num a) =>
                        Data.SIMD.SIMD8.X8 a -> a
    timesHorizontalX8 :: (Data.SIMD.SIMD8.SIMD8 a, GHC.Num.Num a) =>
                         Data.SIMD.SIMD8.X8 a -> a
    RecFlag: Recursive
    {-# MINIMAL plusX8, minusX8, timesX8, negateX8, indexArrayAsX8,
                indexOffAddrAsX8, insertX8, unpackX8, packX8, broadcastX8,
                readOffAddrAsX8, writeOffAddrAsX8 #-}
9d5ec4950535b150e5e9fce2fca4e23d
  class Data.SIMD.SIMD8.SIMD8 a => SIMD8Float a where
    divideX8 :: Data.SIMD.SIMD8.X8 a
                -> Data.SIMD.SIMD8.X8 a -> Data.SIMD.SIMD8.X8 a
    {-# MINIMAL divideX8 #-}
3c0d44575169a4627c6f4dd023c530cd
  type role UnsafePrimVector phantom
  data UnsafePrimVector a
    = UnsafePrimVector {-# UNPACK #-}GHC.Types.Int
                       {-# UNPACK #-}GHC.Types.Int
                       {-# UNPACK #-}Data.Primitive.ByteArray.ByteArray
c8f250d5a9592ba5bc72ef70ded87288
  mul8 :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (i# :: GHC.Prim.Int#) -> GHC.Prim.*# i# 8#) -}
d0850b6132e36802c6887ffc640b15b4
  unI# :: GHC.Types.Int -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Types.Int) ->
                 case ds of wild { GHC.Types.I# i# -> i# }) -}
3f9f2a25ff756c076243768517a293c0
  unVectorizeStorableX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Foreign.Storable.Storable a,
     Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 a)) =>
    Data.Vector.Storable.Vector (Data.SIMD.SIMD8.X8 a)
    -> Data.Vector.Storable.Vector a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><L,A><L,A><S(SSL),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dStorable :: Foreign.Storable.Storable a)
                   ($dStorable1 :: Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 a))
                   (v :: Data.Vector.Storable.Vector (Data.SIMD.SIMD8.X8 a)) ->
                 case v of wild { Data.Vector.Storable.Vector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c*
                        (GHC.Types.I# dt)
                        (GHC.Types.I# 8#) of dt4 { GHC.Types.I# dt5 ->
                 case GHC.ForeignPtr.castForeignPtr
                        @ (Data.SIMD.SIMD8.X8 a)
                        @ a
                        (GHC.ForeignPtr.ForeignPtr
                           @ (Data.SIMD.SIMD8.X8 a)
                           dt1
                           dt2) of dt6 { GHC.ForeignPtr.ForeignPtr dt7 dt8 ->
                 Data.Vector.Storable.Vector @ a dt5 dt7 dt8 } } }) -}
703eaaf0f53c7ad36944a69403f4f4a8
  unVectorizeUnboxedX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Data.Vector.Unboxed.Base.Unbox a) =>
    Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a)
    -> Data.Vector.Unboxed.Base.Vector a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox a)
                   (v :: Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a)) ->
                 case Unsafe.Coerce.unsafeCoerce
                        @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a))
                        @ (Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any)
                        v of wild { Data.SIMD.SIMD8.UnsafePrimVector dt dt1 dt2 ->
                 case GHC.Num.$fNumInt_$c*
                        (GHC.Types.I# dt)
                        (GHC.Types.I# 8#) of dt3 { GHC.Types.I# dt4 ->
                 case GHC.Num.$fNumInt_$c*
                        (GHC.Types.I# dt1)
                        (GHC.Types.I# 8#) of dt5 { GHC.Types.I# dt6 ->
                 Unsafe.Coerce.unsafeCoerce
                   @ (Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any)
                   @ (Data.Vector.Unboxed.Base.Vector a)
                   (Data.SIMD.SIMD8.UnsafePrimVector
                      @ GHC.Prim.Any
                      dt4
                      dt6
                      dt2) } } }) -}
34e22efe4f1e4a0ebb1aca35623244ad
  unsafeVectorizeUnboxedX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Data.Vector.Unboxed.Base.Unbox a) =>
    Data.Vector.Unboxed.Base.Vector a
    -> Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox a)
                   (v :: Data.Vector.Unboxed.Base.Vector a) ->
                 case Unsafe.Coerce.unsafeCoerce
                        @ (Data.Vector.Unboxed.Base.Vector a)
                        @ (Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any)
                        v of wild { Data.SIMD.SIMD8.UnsafePrimVector dt dt1 dt2 ->
                 case GHC.Real.$fIntegralInt_$cdiv
                        (GHC.Types.I# dt)
                        (GHC.Types.I# 8#) of dt3 { GHC.Types.I# dt4 ->
                 case GHC.Real.$fIntegralInt_$cdiv
                        (GHC.Types.I# dt1)
                        (GHC.Types.I# 8#) of dt5 { GHC.Types.I# dt6 ->
                 Unsafe.Coerce.unsafeCoerce
                   @ (Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any)
                   @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a))
                   (Data.SIMD.SIMD8.UnsafePrimVector
                      @ GHC.Prim.Any
                      dt4
                      dt6
                      dt2) } } }) -}
e34978dee080b282ccf202a87b5cf50f
  vectorizeStorableX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Foreign.Storable.Storable a,
     Foreign.Storable.Storable (Data.SIMD.SIMD8.X8 a)) =>
    Data.Vector.Storable.Vector a
    -> Data.Vector.Storable.Vector (Data.SIMD.SIMD8.X8 a)
  {- Arity: 4, Strictness: <L,A><L,A><L,A><S(SSL),1*U(U,U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dStorable :: Foreign.Storable.Storable a)
                   ($dStorable1 :: Foreign.Storable.Storable
                                     (Data.SIMD.SIMD8.X8 a)) ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD8"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD8.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 404#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 10#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 404#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 54#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (v :: Data.Vector.Storable.Vector a) ->
                 let {
                   ds :: (GHC.ForeignPtr.ForeignPtr a, GHC.Types.Int)
                   = case v of wild { Data.Vector.Storable.Vector dt dt1 dt2 ->
                     (GHC.ForeignPtr.ForeignPtr @ a dt1 dt2, GHC.Types.I# dt) }
                 } in
                 let {
                   len :: GHC.Types.Int = case ds of wild { (,) fp len1 -> len1 }
                 } in
                 case GHC.Classes.eqInt
                        (GHC.Real.$fIntegralInt_$cmod len (GHC.Types.I# 8#))
                        (GHC.Types.I# 0#) of wild {
                   GHC.Types.False
                   -> GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Storable.Vector (Data.SIMD.SIMD8.X8 a))
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "vectorizeStorableX8 vector wrong len"#))
                   GHC.Types.True
                   -> case GHC.Real.$fIntegralInt_$cdiv
                             len
                             (GHC.Types.I# 8#) of dt { GHC.Types.I# dt1 ->
                      case ds of wild1 { (,) fp len1 ->
                      case GHC.ForeignPtr.castForeignPtr
                             @ a
                             @ (Data.SIMD.SIMD8.X8 a)
                             fp of dt2 { GHC.ForeignPtr.ForeignPtr dt3 dt4 ->
                      Data.Vector.Storable.Vector
                        @ (Data.SIMD.SIMD8.X8 a)
                        dt1
                        dt3
                        dt4 } } } }) -}
9497c63c2feb764135e161d5740e6375
  vectorizeUnboxedX8 ::
    (Data.SIMD.SIMD8.SIMD8 a, Data.Vector.Unboxed.Base.Unbox a) =>
    Data.Vector.Unboxed.Base.Vector a
    -> Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a)
  {- Arity: 3, Strictness: <L,A><L,A><S,1*U>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dSIMD8 :: Data.SIMD.SIMD8.SIMD8 a)
                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox a) ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "main"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Data.SIMD.SIMD8"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "src/Data/SIMD/SIMD8.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 379#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 10#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 379#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 60#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (v :: Data.Vector.Unboxed.Base.Vector a) ->
                 let {
                   ds :: Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any
                   = Unsafe.Coerce.unsafeCoerce
                       @ (Data.Vector.Unboxed.Base.Vector a)
                       @ (Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any)
                       v
                 } in
                 let {
                   len :: GHC.Types.Int
                   = case ds of wild { Data.SIMD.SIMD8.UnsafePrimVector dt dt1 dt2 ->
                     GHC.Types.I# dt }
                 } in
                 let {
                   off :: GHC.Types.Int
                   = case ds of wild { Data.SIMD.SIMD8.UnsafePrimVector dt dt1 dt2 ->
                     GHC.Types.I# dt1 }
                 } in
                 case GHC.Classes.&&
                        (GHC.Classes.eqInt
                           (GHC.Real.$fIntegralInt_$cmod len (GHC.Types.I# 8#))
                           (GHC.Types.I# 0#))
                        (GHC.Classes.eqInt
                           (GHC.Real.$fIntegralInt_$cmod off (GHC.Types.I# 8#))
                           (GHC.Types.I# 0#)) of wild {
                   GHC.Types.False
                   -> GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a))
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "vectorizeUnboxedX8 vector wrong len/offset"#))
                   GHC.Types.True
                   -> case GHC.Real.$fIntegralInt_$cdiv
                             len
                             (GHC.Types.I# 8#) of dt { GHC.Types.I# dt1 ->
                      case GHC.Real.$fIntegralInt_$cdiv
                             off
                             (GHC.Types.I# 8#) of dt2 { GHC.Types.I# dt3 ->
                      case ds of wild1 { Data.SIMD.SIMD8.UnsafePrimVector dt4 dt5 dt6 ->
                      Unsafe.Coerce.unsafeCoerce
                        @ (Data.SIMD.SIMD8.UnsafePrimVector GHC.Prim.Any)
                        @ (Data.Vector.Unboxed.Base.Vector (Data.SIMD.SIMD8.X8 a))
                        (Data.SIMD.SIMD8.UnsafePrimVector
                           @ GHC.Prim.Any
                           dt1
                           dt3
                           dt6) } } } }) -}
instance GHC.Real.Fractional [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fFractionalX8
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fMVectorMVectorX8
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fMVectorMVectorX80
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fMVectorMVectorX81
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fMVectorMVectorX82
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fMVectorMVectorX83
instance Data.Vector.Generic.Mutable.Base.MVector [Data.Vector.Unboxed.Base.MVector,
                                                   Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fMVectorMVectorX84
instance GHC.Num.Num [Data.SIMD.SIMD8.X8] = Data.SIMD.SIMD8.$fNumX8
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fPrimX8
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fPrimX80
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fPrimX81
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fPrimX82
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fPrimX83
instance Data.Primitive.Types.Prim [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fPrimX84
instance Data.SIMD.SIMD8.SIMD8 [GHC.Types.Double]
  = Data.SIMD.SIMD8.$fSIMD8Double
instance Data.SIMD.SIMD8.SIMD8 [GHC.Types.Float]
  = Data.SIMD.SIMD8.$fSIMD8Float
instance Data.SIMD.SIMD8.SIMD8Float [GHC.Types.Double]
  = Data.SIMD.SIMD8.$fSIMD8FloatDouble
instance Data.SIMD.SIMD8.SIMD8Float [GHC.Types.Float]
  = Data.SIMD.SIMD8.$fSIMD8FloatFloat
instance Data.SIMD.SIMD8.SIMD8 [GHC.Int.Int32]
  = Data.SIMD.SIMD8.$fSIMD8Int32
instance Data.SIMD.SIMD8.SIMD8 [GHC.Int.Int64]
  = Data.SIMD.SIMD8.$fSIMD8Int64
instance Data.SIMD.SIMD8.SIMD8 [GHC.Word.Word32]
  = Data.SIMD.SIMD8.$fSIMD8Word32
instance Data.SIMD.SIMD8.SIMD8 [GHC.Word.Word64]
  = Data.SIMD.SIMD8.$fSIMD8Word64
instance GHC.Show.Show [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fShowX8
instance Foreign.Storable.Storable [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fStorableX8
instance Foreign.Storable.Storable [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fStorableX80
instance Foreign.Storable.Storable [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fStorableX81
instance Foreign.Storable.Storable [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fStorableX82
instance Foreign.Storable.Storable [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fStorableX83
instance Foreign.Storable.Storable [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fStorableX84
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fUnboxX8
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fUnboxX80
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fUnboxX81
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fUnboxX82
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fUnboxX83
instance Data.Vector.Unboxed.Base.Unbox [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fUnboxX84
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fVectorVectorX8
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fVectorVectorX80
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fVectorVectorX81
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fVectorVectorX82
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fVectorVectorX83
instance Data.Vector.Generic.Base.Vector [Data.Vector.Unboxed.Base.Vector,
                                          Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.$fVectorVectorX84
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:MVectorsX810
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:MVectorsX88
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:MVectorsX86
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:MVectorsX84
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:MVectorsX82
family instance Data.Vector.Unboxed.Base.MVector [.],
                                                 [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:MVectorsX80
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:VectorX810
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:VectorX88
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:VectorX86
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:VectorX84
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:VectorX82
family instance Data.Vector.Unboxed.Base.Vector [Data.SIMD.SIMD8.X8]
  = Data.SIMD.SIMD8.D:R:VectorX80
family instance Data.SIMD.SIMD8.X8 [GHC.Types.Float]
  = Data.SIMD.SIMD8.D:R:X8Float0
family instance Data.SIMD.SIMD8.X8 [GHC.Types.Double]
  = Data.SIMD.SIMD8.D:R:X8Double0
family instance Data.SIMD.SIMD8.X8 [GHC.Word.Word32]
  = Data.SIMD.SIMD8.D:R:X8Word320
family instance Data.SIMD.SIMD8.X8 [GHC.Word.Word64]
  = Data.SIMD.SIMD8.D:R:X8Word640
family instance Data.SIMD.SIMD8.X8 [GHC.Int.Int32]
  = Data.SIMD.SIMD8.D:R:X8Int320
family instance Data.SIMD.SIMD8.X8 [GHC.Int.Int64]
  = Data.SIMD.SIMD8.D:R:X8Int640
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicLength @ (X8 Double)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                  (Data.SIMD.SIMD8.X8
                                                                                                     GHC.Types.Double))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD8.X8
                                                                     GHC.Types.Double)
                                                                $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicLength @ (X8 Float)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                 (Data.SIMD.SIMD8.X8
                                                                                                    GHC.Types.Float))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD8.X8
                                                                     GHC.Types.Float)
                                                                $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicLength @ (X8 Int32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                 (Data.SIMD.SIMD8.X8
                                                                                                    GHC.Int.Int32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD8.X8
                                                                     GHC.Int.Int32)
                                                                $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicLength @ (X8 Int64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                 (Data.SIMD.SIMD8.X8
                                                                                                    GHC.Int.Int64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD8.X8
                                                                     GHC.Int.Int64)
                                                                $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicLength @ (X8 Word32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                  (Data.SIMD.SIMD8.X8
                                                                                                     GHC.Word.Word32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD8.X8
                                                                     GHC.Word.Word32)
                                                                $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicLength @ (X8 Word64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                  (Data.SIMD.SIMD8.X8
                                                                                                     GHC.Word.Word64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicLength @ (Data.SIMD.SIMD8.X8
                                                                     GHC.Word.Word64)
                                                                $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicLength
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicUnsafeSlice @ (X8
                                                               Double)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                      (Data.SIMD.SIMD8.X8
                                                                                                                                                                         GHC.Types.Double))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD8.X8
                                                                          GHC.Types.Double)
                                                                     $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX83_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicUnsafeSlice @ (X8
                                                               Float)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                     (Data.SIMD.SIMD8.X8
                                                                                                                                                                        GHC.Types.Float))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD8.X8
                                                                          GHC.Types.Float)
                                                                     $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX84_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicUnsafeSlice @ (X8
                                                               Int32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                     (Data.SIMD.SIMD8.X8
                                                                                                                                                                        GHC.Int.Int32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD8.X8
                                                                          GHC.Int.Int32)
                                                                     $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX82_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicUnsafeSlice @ (X8
                                                               Int64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                     (Data.SIMD.SIMD8.X8
                                                                                                                                                                        GHC.Int.Int64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD8.X8
                                                                          GHC.Int.Int64)
                                                                     $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX81_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicUnsafeSlice @ (X8
                                                               Word32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                      (Data.SIMD.SIMD8.X8
                                                                                                                                                                         GHC.Word.Word32))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD8.X8
                                                                          GHC.Word.Word32)
                                                                     $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX80_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD8 $fMVectorMVectora_$cbasicUnsafeSlice @ (X8
                                                               Word64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                                                                                                                      (Data.SIMD.SIMD8.X8
                                                                                                                                                                         GHC.Word.Word64))
  Data.Vector.Primitive.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice @ (Data.SIMD.SIMD8.X8
                                                                          GHC.Word.Word64)
                                                                     $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX8_$s$fMVectorMVectora_$cbasicUnsafeSlice
"SPEC/Data.SIMD.SIMD8 alignment @ (X8 Double)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                            (Data.SIMD.SIMD8.X8
                                                                               GHC.Types.Double))
  Data.Primitive.alignment @ (Data.SIMD.SIMD8.X8 GHC.Types.Double)
                           $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX83_$salignment
"SPEC/Data.SIMD.SIMD8 alignment @ (X8 Float)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                           (Data.SIMD.SIMD8.X8
                                                                              GHC.Types.Float))
  Data.Primitive.alignment @ (Data.SIMD.SIMD8.X8 GHC.Types.Float)
                           $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX84_$salignment
"SPEC/Data.SIMD.SIMD8 alignment @ (X8 Int32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                           (Data.SIMD.SIMD8.X8
                                                                              GHC.Int.Int32))
  Data.Primitive.alignment @ (Data.SIMD.SIMD8.X8 GHC.Int.Int32)
                           $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX82_$salignment
"SPEC/Data.SIMD.SIMD8 alignment @ (X8 Int64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                           (Data.SIMD.SIMD8.X8
                                                                              GHC.Int.Int64))
  Data.Primitive.alignment @ (Data.SIMD.SIMD8.X8 GHC.Int.Int64)
                           $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX81_$salignment
"SPEC/Data.SIMD.SIMD8 alignment @ (X8 Word32)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                            (Data.SIMD.SIMD8.X8
                                                                               GHC.Word.Word32))
  Data.Primitive.alignment @ (Data.SIMD.SIMD8.X8 GHC.Word.Word32)
                           $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX80_$salignment
"SPEC/Data.SIMD.SIMD8 alignment @ (X8 Word64)" [ALWAYS] forall ($dPrim :: Data.Primitive.Types.Prim
                                                                            (Data.SIMD.SIMD8.X8
                                                                               GHC.Word.Word64))
  Data.Primitive.alignment @ (Data.SIMD.SIMD8.X8 GHC.Word.Word64)
                           $dPrim
  = Data.SIMD.SIMD8.$fMVectorMVectorX8_$salignment
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

